import axios from "axios";
import { message } from "antd";
import ENV_CONFIG from "../config/env.js";

const API_BASE_URL = ENV_CONFIG.API.BASE_URL;

const axiosClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: ENV_CONFIG.API.TIMEOUT,
  headers: {
    "Content-Type": "application/json",
  },
});

// Request interceptor
axiosClient.interceptors.request.use(
  (config) => {
    // B·ªè ho√†n to√†n log cho login API
    if (process.env.NODE_ENV === 'development' && false && !config.url?.includes("/login")) { // T·∫Øt log
      console.log("üîç [axiosClient] Sending request to:", config.url);
    }

    // üÜï Ki·ªÉm tra token tr∆∞·ªõc khi g·ª≠i request (tr·ª´ login/register)
    if (!config.url.includes("/login") && !config.url.includes("/register") && !config.url.includes("/verify-email")) {
      // üÜï B·ªè qua token validation cho m·ªôt s·ªë API khi page m·ªõi load
      const pageLoadTime = performance.timing.navigationStart || performance.timeOrigin;
      const currentTime = Date.now();
      const timeSincePageLoad = currentTime - pageLoadTime;
      const isRecentPageLoad = timeSincePageLoad < 5000; // 5 gi√¢y ƒë·∫ßu ti√™n
      
      const shouldSkipValidation = shouldSkipTokenValidation(config.url) && isRecentPageLoad;
      
      if (!shouldSkipValidation) {
        const token = localStorage.getItem("token") || localStorage.getItem("accessToken");
        if (token && isTokenExpired(token)) {
          console.warn("üîí [axiosClient] Token expired before request, handling expiration...");
          handleTokenExpiration("Token ƒë√£ h·∫øt h·∫°n tr∆∞·ªõc khi g·ª≠i y√™u c·∫ßu");
          return Promise.reject(new Error("Token expired"));
        }
      } else {
        console.log("üîÑ [axiosClient] Skipping token validation for recent page load:", {
          url: config.url,
          timeSincePageLoad: `${timeSincePageLoad}ms`
        });
      }
    }

    // ‚úÖ L·∫•y token t·ª´ c·∫£ hai n∆°i ƒë·ªÉ ƒë·∫£m b·∫£o compatibility
    let token = localStorage.getItem("token") || localStorage.getItem("accessToken"); // Th·ª≠ l·∫•y token t·ª´ c·∫£ hai format
    const user = localStorage.getItem("user");

    // B·ªè ho√†n to√†n log cho login API
    if (process.env.NODE_ENV === 'development' && false && !config.url?.includes("/login")) { // T·∫Øt log
      console.log("üîç [axiosClient] LocalStorage check:");
      console.log("  - Token (separate) exists:", !!token);
      console.log("  - User exists:", !!user);
    }

    // N·∫øu kh√¥ng c√≥ token ri√™ng bi·ªát, th·ª≠ l·∫•y t·ª´ trong user object
    if (!token && user) {
      try {
        const userData = JSON.parse(user);
        token = userData.token;
        // B·ªè ho√†n to√†n log cho login API
        if (process.env.NODE_ENV === 'development' && false && !config.url?.includes("/login")) { // T·∫Øt log
          console.log("üîç [axiosClient] Token found in user object");
          console.log("üîç [axiosClient] User data:", {
            id: userData.id,
            email: userData.email,
            role: userData.role,
            fullName: userData.fullName,
            hasToken: !!token,
          });
        }
        
        // üîÑ Auto-sync token t·ª´ user object v√†o localStorage n·∫øu thi·∫øu
        if (token && !localStorage.getItem("token")) {
          localStorage.setItem("token", token);
        }
        
        // üîÑ Also sync to STORAGE_KEYS format for compatibility
        if (token && !localStorage.getItem("accessToken")) {
          localStorage.setItem("accessToken", token);
        }
      } catch (e) {
        console.error("‚ùå [axiosClient] Error parsing user data:", e);
      }
    }

    // B·ªè ho√†n to√†n log cho login API
    if (process.env.NODE_ENV === 'development' && false && !config.url?.includes("/login")) { // T·∫Øt log
      console.log("  - Final token exists:", !!token);

      if (token) {
        console.log(
          "üîç [axiosClient] Token (first 50 chars):",
          token.substring(0, 50) + "..."
        );
        config.headers.Authorization = `Bearer ${token}`;
        console.log("‚úÖ [axiosClient] Authorization header set");
      } else {
        console.log("‚ö†Ô∏è [axiosClient] No token found anywhere");
      }

      console.log("üîç [axiosClient] Full request config:", {
        url: config.url,
        method: config.method,
        baseURL: config.baseURL,
        headers: {
          ...config.headers,
          Authorization: config.headers.Authorization ? "[PRESENT]" : "[MISSING]",
        },
        timeout: config.timeout,
      });
    } else {
      // Ch·ªâ set token m√† kh√¥ng log
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
    }

    return config;
  },
  (error) => {
    console.error("‚ùå [axiosClient] Request interceptor error:", error);
    return Promise.reject(error);
  }
);

// Response interceptor
axiosClient.interceptors.response.use(
  (response) => {
    // B·ªè ho√†n to√†n log cho login API
    if (process.env.NODE_ENV === 'development' && false && !response.config.url?.includes("/login")) { // T·∫Øt log
      console.log("‚úÖ [axiosClient] Response received:", {
        status: response.status,
        statusText: response.statusText,
        url: response.config.url,
        dataType: typeof response.data,
        dataSize: JSON.stringify(response.data).length,
      });

      if (response.data) {
        console.log(
          "‚úÖ [axiosClient] Response data preview:",
          JSON.stringify(response.data).substring(0, 200) + "..."
        );
      }
    }

    return response;
  },
  async (error) => {
    // B·ªè ho√†n to√†n log cho login API
    if (!error.config?.url?.includes("/login")) {
      console.error("‚ùå [axiosClient] Response error details:");
      console.error("  - Status:", error.response?.status);
      console.error("  - Status Text:", error.response?.statusText);
      console.error("  - URL:", error.config?.url);
      console.error("  - Method:", error.config?.method);
      console.error("  - Message:", error.message);
    }

    if (error.response) {
      // B·ªè ho√†n to√†n log cho login API
      if (!error.config?.url?.includes("/login")) {
        console.error(
          "‚ùå [axiosClient] Error response data:",
          error.response.data
        );
        console.error(
          "‚ùå [axiosClient] Error response headers:",
          error.response.headers
        );
      }

      // B·ªè ho√†n to√†n log cho login API
      if (!error.config?.url?.includes("/login")) {
        // Log specific error messages from backend
        if (error.response.data?.message) {
          console.error(
            "‚ùå [axiosClient] Backend error message:",
            error.response.data.message
          );
        }

        if (error.response.data?.errors) {
          console.error(
            "‚ùå [axiosClient] Backend validation errors:",
            error.response.data.errors
          );
        }
      }
    } else if (error.request) {
      console.error("‚ùå [axiosClient] No response received:", error.request);
      // ‚úÖ B·ªè th√¥ng b√°o l·ªói cho profile API v√¨ c√≥ fallback
      if (!error.config?.url?.includes("/profiles/")) {
        message.error({
          content: "Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng!",
          duration: 4,
          key: "network-error",
        });
      }
    }

    // Handle different HTTP status codes
    switch (error.response?.status) {
      case 401:
        // Ch·ªâ log khi debug mode
        if (process.env.NODE_ENV === 'development' && false) {
          console.warn("üîí [axiosClient] 401 Unauthorized - Token invalid or expired");
        }
        // ‚úÖ B·ªè th√¥ng b√°o l·ªói cho c√°c API kh√¥ng quan tr·ªçng
        if (!shouldSkipTokenValidation(error.config?.url)) {
          
              // üÜï Ki·ªÉm tra xem c√≥ ph·∫£i ƒëang refresh trang kh√¥ng
    const isPageRefresh = performance.navigation.type === 1 || 
                         document.readyState === 'loading' ||
                         window.performance.getEntriesByType('navigation')[0]?.type === 'reload';
    
    // üÜï Th√™m ki·ªÉm tra th·ªùi gian t·ª´ khi page load
    const pageLoadTime = performance.timing.navigationStart || performance.timeOrigin;
    const currentTime = Date.now();
    const timeSincePageLoad = currentTime - pageLoadTime;
    const isRecentPageLoad = timeSincePageLoad < 5000; // 5 gi√¢y ƒë·∫ßu ti√™n
    
    if (!isPageRefresh && !isRecentPageLoad) {
      handleTokenExpiration("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n");
    } else {
      console.log("üîÑ [axiosClient] Page is refreshing or recently loaded, skipping 401 handling", {
        isPageRefresh,
        isRecentPageLoad,
        timeSincePageLoad: `${timeSincePageLoad}ms`
      });
    }
        }
        break;
      case 403:
        console.warn(
          "üîí [axiosClient] 403 Forbidden - Token c√≥ th·ªÉ h·∫øt h·∫°n"
        );
        // ‚úÖ B·ªè th√¥ng b√°o l·ªói cho c√°c API kh√¥ng quan tr·ªçng
        if (!shouldSkipTokenValidation(error.config?.url)) {
          
          // üÜï Ki·ªÉm tra xem c√≥ user data h·ª£p l·ªá kh√¥ng tr∆∞·ªõc khi refresh
          const hasValidUserData = checkAndRestoreUserData();
          if (hasValidUserData) {
            // Th·ª≠ refresh token tr∆∞·ªõc khi logout
            try {
              await forceRefreshToken();
              // N·∫øu refresh th√†nh c√¥ng, th·ª≠ l·∫°i request
              console.log("üîÑ [axiosClient] Token refreshed, retrying request...");
              return axiosClient.request(error.config);
            } catch (refreshError) {
              console.warn("‚ö†Ô∏è [axiosClient] Token refresh failed, logging out...");
              handleTokenExpiration("Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p");
            }
          } else {
            // üÜï Kh√¥ng c√≥ user data h·ª£p l·ªá, kh√¥ng c·∫ßn refresh token
            console.log("‚ÑπÔ∏è [axiosClient] No valid user data, skipping token refresh");
            // Kh√¥ng logout, ch·ªâ reject error ƒë·ªÉ component x·ª≠ l√Ω
            return Promise.reject(error);
          }
        }
        break;

      case 404:
        console.warn("üîç [axiosClient] 404 Not Found - Endpoint may not exist");
        message.warning({
          content: "Kh√¥ng t√¨m th·∫•y t√†i nguy√™n y√™u c·∫ßu!",
          duration: 3,
          key: "not-found",
        });
        break;

      case 500:
        console.error(
          "üí• [axiosClient] 500 Internal Server Error - Backend issue"
        );
        // ‚úÖ B·ªè th√¥ng b√°o l·ªói cho doctor profile v√¨ c√≥ fallback
        if (!error.config?.url?.includes("/profiles/doctor")) {
          message.error({
            content: "L·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i sau!",
            duration: 4,
            key: "server-error",
          });
        }
        break;

      default:
        console.error(
          `‚ùå [axiosClient] HTTP ${error.response?.status} - Unexpected error`
        );
        // ‚úÖ B·ªè th√¥ng b√°o l·ªói cho profile API v√¨ c√≥ fallback
        if (!error.config?.url?.includes("/profiles/")) {
          message.error({
            content: "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng th·ª≠ l·∫°i!",
            duration: 4,
            key: "unknown-error",
          });
        }
    }

    return Promise.reject(error);
  }
);

// üÜï Flag ƒë·ªÉ tr√°nh g·ªçi nhi·ªÅu l·∫ßn refresh token
let isRefreshingToken = false;
let isHandlingTokenExpiration = false;

// üÜï Function ƒë·ªÉ ki·ªÉm tra xem c√≥ n√™n b·ªè qua token validation kh√¥ng
const shouldSkipTokenValidation = (url) => {
  // B·ªè qua cho c√°c API kh√¥ng quan tr·ªçng
  const skipUrls = [
    "/login",
    "/auth", 
    "/profiles/",
    "/clinical-results",
    "/treatment-plans",
    "/doctor/schedule/my-patients",
    "/treatment-workflow/doctor"
  ];
  
  return skipUrls.some(skipUrl => url?.includes(skipUrl));
};

// üîÑ Force refresh token function
export const forceRefreshToken = async () => {
  // Tr√°nh g·ªçi nhi·ªÅu l·∫ßn c√πng l√∫c
  if (isRefreshingToken) {
    console.log("üîÑ [axiosClient] Token refresh already in progress, skipping...");
    return;
  }
  
  isRefreshingToken = true;
  console.log("üîÑ [axiosClient] Force refreshing token...");
  
  try {
    // Ki·ªÉm tra user data tr∆∞·ªõc
    const hasValidUserData = checkAndRestoreUserData();
    if (!hasValidUserData) {
      console.warn("‚ö†Ô∏è [axiosClient] No valid user data found, cannot refresh token");
      throw new Error("No valid user data found");
    }
    
    // L·∫•y th√¥ng tin user hi·ªán t·∫°i
    const user = localStorage.getItem("user");
    let userData;
    try {
      userData = JSON.parse(user);
    } catch (parseError) {
      console.error("‚ùå [axiosClient] Error parsing user data:", parseError);
      throw new Error("Invalid user data format");
    }
    
    if (!userData.email) {
      console.warn("‚ö†Ô∏è [axiosClient] No email found in user data");
      throw new Error("No email in user data");
    }
    
    console.log("üîÑ [axiosClient] Attempting to refresh token for user:", userData.email);
    
    // Th·ª≠ ƒëƒÉng nh·∫≠p l·∫°i v·ªõi th√¥ng tin hi·ªán t·∫°i
    const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {
      email: userData.email,
      password: "password123" // S·ª≠ d·ª•ng password m·∫∑c ƒë·ªãnh cho demo
    });
    
    if (response.data?.token) {
      // C·∫≠p nh·∫≠t token m·ªõi
      localStorage.setItem("token", response.data.token);
      localStorage.setItem("accessToken", response.data.token);
      
      // C·∫≠p nh·∫≠t user object v·ªõi token m·ªõi
      const updatedUser = { ...userData, token: response.data.token };
      localStorage.setItem("user", JSON.stringify(updatedUser));
      
      console.log("‚úÖ [axiosClient] Token refreshed successfully");
      return response.data.token;
    } else {
      console.warn("‚ö†Ô∏è [axiosClient] No token in response");
      throw new Error("No token in response");
    }
  } catch (error) {
    console.error("‚ùå [axiosClient] Error refreshing token:", error);
    throw error;
  } finally {
    isRefreshingToken = false;
  }
};

// üîÑ Refresh token from context function (alias for forceRefreshToken)
export const refreshTokenFromContext = () => {
  return forceRefreshToken();
};

// üÜï Centralized logout function
export const handleTokenExpiration = (reason = "Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n") => {
  // Tr√°nh g·ªçi nhi·ªÅu l·∫ßn c√πng l√∫c
  if (isHandlingTokenExpiration) {
    console.log("üîí [axiosClient] Token expiration already being handled, skipping...");
    return;
  }
  
  isHandlingTokenExpiration = true;
  console.log("üîí [axiosClient] Handling token expiration:", reason);
  
  // üÜï Ki·ªÉm tra xem c√≥ ph·∫£i ƒëang refresh trang kh√¥ng
  const isPageRefresh = performance.navigation.type === 1 || 
                       document.readyState === 'loading' ||
                       window.performance.getEntriesByType('navigation')[0]?.type === 'reload';
  
  // üÜï Th√™m ki·ªÉm tra th·ªùi gian t·ª´ khi page load
  const pageLoadTime = performance.timing.navigationStart || performance.timeOrigin;
  const currentTime = Date.now();
  const timeSincePageLoad = currentTime - pageLoadTime;
  const isRecentPageLoad = timeSincePageLoad < 5000; // 5 gi√¢y ƒë·∫ßu ti√™n
  
  if (isPageRefresh || isRecentPageLoad) {
    console.log("üîÑ [axiosClient] Page is refreshing or recently loaded, skipping token expiration handling", {
      isPageRefresh,
      isRecentPageLoad,
      timeSincePageLoad: `${timeSincePageLoad}ms`
    });
    isHandlingTokenExpiration = false;
    return;
  }
  
  // üÜï Ki·ªÉm tra xem c√≥ user data h·ª£p l·ªá kh√¥ng tr∆∞·ªõc khi logout
  const hasValidUserData = checkAndRestoreUserData();
  if (!hasValidUserData) {
    console.log("‚ÑπÔ∏è [axiosClient] No valid user data, skipping logout");
    isHandlingTokenExpiration = false;
    return;
  }
  
  // Ch·ªâ hi·ªÉn th·ªã th√¥ng b√°o n·∫øu ch∆∞a c√≥ th√¥ng b√°o n√†o ƒëang hi·ªÉn th·ªã
  const existingMessage = document.querySelector('.ant-message-notice');
  if (!existingMessage) {
    message.error({
      content: `üîí ${reason}. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!`,
      duration: 8,
      key: "token-expired",
      style: {
        marginTop: '20vh',
        fontSize: '16px',
        fontWeight: 'bold',
      },
    });
  }
  
  // Clear t·∫•t c·∫£ d·ªØ li·ªáu authentication
  localStorage.removeItem("user");
  localStorage.removeItem("token");
  localStorage.removeItem("accessToken");
  localStorage.removeItem("refreshToken");
  
  // Hi·ªÉn th·ªã th√¥ng b√°o console ƒë·ªÉ debug
  console.warn("üîí [axiosClient] Token expired - no auto redirect");
  
  // Reset flag sau 3 gi√¢y
  setTimeout(() => {
    isHandlingTokenExpiration = false;
  }, 3000);
  
  // B·ªè redirect t·ª± ƒë·ªông ƒë·ªÉ tr√°nh render l·∫°i trang
  // setTimeout(() => {
  //   if (!window.location.pathname.includes("/login")) {
  //     console.log("üîí [axiosClient] Redirecting to login page");
  //     window.location.href = "/login";
  //   }
  // }, 3000);
};

// üÜï Function ƒë·ªÉ ki·ªÉm tra v√† kh√¥i ph·ª•c user data
export const checkAndRestoreUserData = () => {
  try {
    const user = localStorage.getItem("user");
    const token = localStorage.getItem("token");
    
    if (!user && !token) {
      console.log("‚ÑπÔ∏è [axiosClient] No user data or token found");
      return false;
    }
    
    if (!user && token) {
      console.warn("‚ö†Ô∏è [axiosClient] Token exists but no user data found");
      return false;
    }
    
    if (user && !token) {
      console.warn("‚ö†Ô∏è [axiosClient] User data exists but no token found");
      return false;
    }
    
    // C·∫£ user v√† token ƒë·ªÅu t·ªìn t·∫°i
    const userData = JSON.parse(user);
    console.log("‚úÖ [axiosClient] User data and token found:", {
      hasUser: !!userData,
      hasEmail: !!userData.email,
      hasToken: !!token,
      userRole: userData.role
    });
    
    return true;
  } catch (error) {
    console.error("‚ùå [axiosClient] Error checking user data:", error);
    return false;
  }
};

// üÜï Check if token is expired (JWT token validation)
export const isTokenExpired = (token) => {
  if (!token) return true;
  
  try {
    // Decode JWT token (without verification)
    const parts = token.split('.');
    if (parts.length !== 3) {
      console.warn("‚ö†Ô∏è [axiosClient] Invalid JWT token format");
      return true;
    }
    
    const base64Url = parts[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));

    const payload = JSON.parse(jsonPayload);
    const currentTime = Math.floor(Date.now() / 1000);
    
    // Check if token has expiration field
    if (!payload.exp) {
      console.warn("‚ö†Ô∏è [axiosClient] Token has no expiration field");
      return false; // Don't consider it expired if no exp field
    }
    
    // Check if token is expired (with 5 minutes buffer)
    const isExpired = payload.exp < (currentTime + 300);
    
    if (isExpired) {
      console.log("üîí [axiosClient] Token expired:", {
        tokenExp: new Date(payload.exp * 1000).toISOString(),
        currentTime: new Date(currentTime * 1000).toISOString(),
        bufferTime: new Date((currentTime + 300) * 1000).toISOString()
      });
    }
    
    return isExpired;
  } catch (error) {
    console.error("‚ùå [axiosClient] Error checking token expiration:", error);
    return true; // Consider invalid token as expired
  }
};

// üÜï Validate current token
export const validateCurrentToken = () => {
  const token = localStorage.getItem("token") || localStorage.getItem("accessToken");
  
  if (!token) {
    handleTokenExpiration("Kh√¥ng t√¨m th·∫•y token ƒëƒÉng nh·∫≠p");
    return false;
  }
  
  if (isTokenExpired(token)) {
    handleTokenExpiration("Token ƒë√£ h·∫øt h·∫°n");
    return false;
  }
  
  return true;
};

// üÜï Helper function to ensure token consistency
export const ensureTokenConsistency = () => {
  try {
    const token = localStorage.getItem("token") || localStorage.getItem("accessToken");
    const user = localStorage.getItem("user");
    
    if (!token || !user) {
      return false;
    }
    
    const userData = JSON.parse(user);
    
    // Ensure user object has the token
    if (!userData.token || userData.token !== token) {
      userData.token = token;
      localStorage.setItem("user", JSON.stringify(userData));
      console.log("üîÑ [axiosClient] Token consistency ensured");
    }
    
    return true;
  } catch (error) {
    console.error("‚ùå [axiosClient] Error ensuring token consistency:", error);
    return false;
  }
};

// üÜï Function ƒë·ªÉ validate token khi refresh trang
export const validateTokenOnPageLoad = () => {
  try {
    const token = localStorage.getItem("token") || localStorage.getItem("accessToken");
    const user = localStorage.getItem("user");
    
    // üÜï N·∫øu kh√¥ng c√≥ token ho·∫∑c user data, ch·ªâ return false m√† kh√¥ng clear
    if (!token || !user) {
      console.log("‚ÑπÔ∏è [axiosClient] No token or user data found on page load - user not logged in");
      return false;
    }
    
    // Ki·ªÉm tra token c√≥ expired kh√¥ng
    if (isTokenExpired(token)) {
      console.warn("üîí [axiosClient] Token expired on page load, clearing invalid data");
      localStorage.removeItem("user");
      localStorage.removeItem("token");
      localStorage.removeItem("accessToken");
      return false;
    }
    
    // Ki·ªÉm tra user data c√≥ h·ª£p l·ªá kh√¥ng
    try {
      const userData = JSON.parse(user);
      
      // üÜï C·∫£i thi·ªán logic ki·ªÉm tra token - ch·ªâ clear n·∫øu th·ª±c s·ª± c·∫ßn thi·∫øt
      if (!userData.token) {
        // N·∫øu user object kh√¥ng c√≥ token, th√™m token v√†o user object
        console.log("üîÑ [axiosClient] User object missing token, adding token from localStorage");
        userData.token = token;
        localStorage.setItem("user", JSON.stringify(userData));
        console.log("‚úÖ [axiosClient] Token added to user object");
        return true;
      }
      
      // N·∫øu token trong user object kh√°c v·ªõi token ri√™ng bi·ªát, sync l·∫°i
      if (userData.token !== token) {
        console.log("üîÑ [axiosClient] Token mismatch detected, syncing tokens");
        console.log("  - User object token:", userData.token ? userData.token.substring(0, 20) + "..." : "null");
        console.log("  - Separate token:", token ? token.substring(0, 20) + "..." : "null");
        
        // ∆Øu ti√™n token ri√™ng bi·ªát v√¨ n√≥ th∆∞·ªùng ƒë∆∞·ª£c c·∫≠p nh·∫≠t m·ªõi h∆°n
        userData.token = token;
        localStorage.setItem("user", JSON.stringify(userData));
        console.log("‚úÖ [axiosClient] Tokens synced successfully");
        return true;
      }
      
      console.log("‚úÖ [axiosClient] Token validated successfully on page load");
      return true;
    } catch (parseError) {
      console.warn("‚ö†Ô∏è [axiosClient] Invalid user data format on page load, clearing invalid data");
      localStorage.removeItem("user");
      localStorage.removeItem("token");
      localStorage.removeItem("accessToken");
      return false;
    }
  } catch (error) {
    console.error("‚ùå [axiosClient] Error validating token on page load:", error);
    // üÜï Ch·ªâ clear data n·∫øu c√≥ l·ªói nghi√™m tr·ªçng
    if (error.message.includes("JSON") || error.message.includes("parse")) {
      localStorage.removeItem("user");
      localStorage.removeItem("token");
      localStorage.removeItem("accessToken");
    }
    return false;
  }
};

export default axiosClient;
