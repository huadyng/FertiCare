import axiosClient from "../services/axiosClient";

const apiDoctor = {
  // Helper function to get current user role
  getCurrentUserRole: () => {
    try {
      const user = localStorage.getItem("user");
      if (user) {
        const userData = JSON.parse(user);
        return userData.role?.toUpperCase();
      }
    } catch (error) {
      console.error("Error getting user role:", error);
    }
    return null;
  },

  // Helper function to get doctor profile with fallback
  getDoctorProfileWithFallback: async (doctorId) => {
    console.log(`üîç [apiDoctor] Getting doctor profile for: ${doctorId}`);

    try {
      // Use the correct endpoint for doctor profile
      console.log(
        `üîç [apiDoctor] Using correct endpoint: /api/profiles/doctor/me`
      );
      const response = await axiosClient.get("/api/profiles/doctor/me");

      if (response.data) {
        console.log(`‚úÖ [apiDoctor] Successfully loaded doctor profile`);
        return {
          success: true,
          data: response.data,
          message: "L·∫•y th√¥ng tin b√°c sƒ© th√†nh c√¥ng",
        };
      }
    } catch (error) {
      console.warn(
        `‚ö†Ô∏è [apiDoctor] Failed to load doctor profile:`,
        error.message
      );

      // If it's a permission error, return appropriate message
      if (error.response?.status === 403) {
        console.log("‚ÑπÔ∏è [apiDoctor] Permission denied");
        return {
          success: false,
          data: null,
          message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th√¥ng tin b√°c sƒ©",
          permissionDenied: true,
        };
      }

      // If it's a 500 error, return default data
      if (error.response?.status === 500) {
        console.log("‚ÑπÔ∏è [apiDoctor] Server error, returning default data");
        return {
          success: true,
          data: {
            id: doctorId,
            specialty: "IUI",
            role: "DOCTOR",
            fullName: "B√°c sƒ©",
            email: "doctor@ferticare.com",
          },
          message: "S·ª≠ d·ª•ng th√¥ng tin b√°c sƒ© m·∫∑c ƒë·ªãnh do l·ªói server",
        };
      }
    }

    // If all else fails, return default data
    console.log("‚ÑπÔ∏è [apiDoctor] All attempts failed, returning default data");
    return {
      success: true,
      data: {
        id: doctorId,
        specialty: "IUI",
        role: "DOCTOR",
        fullName: "B√°c sƒ©",
        email: "doctor@ferticare.com",
      },
      message: "S·ª≠ d·ª•ng th√¥ng tin b√°c sƒ© m·∫∑c ƒë·ªãnh",
    };
  },
  // =================== DOCTOR PROFILE ===================
  getMyProfile: async () => {
    try {
      console.log("üîç [apiDoctor] L·∫•y profile b√°c sƒ©...");
      const response = await axiosClient.get("/api/profiles/doctor/me");
      console.log("‚úÖ [apiDoctor] Profile b√°c sƒ©:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói l·∫•y profile:", error);
      throw error;
    }
  },

  updateMyProfile: async (profileData) => {
    try {
      console.log("üîÑ [apiDoctor] C·∫≠p nh·∫≠t profile b√°c sƒ©...", profileData);
      const response = await axiosClient.put(
        "/api/profiles/doctor/me",
        profileData
      );
      console.log("‚úÖ [apiDoctor] C·∫≠p nh·∫≠t th√†nh c√¥ng:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói c·∫≠p nh·∫≠t profile:", error);
      throw error;
    }
  },

  // =================== DASHBOARD STATISTICS ===================
  getDashboardStats: async () => {
    try {
      console.log("üìä [apiDoctor] L·∫•y th·ªëng k√™ dashboard...");

      // L·∫•y danh s√°ch b·ªánh nh√¢n tr∆∞·ªõc ƒë·ªÉ c√≥ d·ªØ li·ªáu c∆° b·∫£n
      const patientsResponse = await apiDoctor.getMyPatients();
      const patients = patientsResponse || [];

      // L·∫•y doctorId t·ª´ localStorage
      const user = localStorage.getItem("user");
      let doctorId = null;

      if (user) {
        try {
          const userData = JSON.parse(user);
          doctorId = userData.id;
        } catch (e) {
          console.error("‚ùå [apiDoctor] L·ªói parse user data:", e);
        }
      }

      // T√≠nh to√°n th·ªëng k√™ c∆° b·∫£n t·ª´ danh s√°ch b·ªánh nh√¢n
      const totalPatients = patients.length;

      // L·∫•y treatment phases c·ªßa b√°c sƒ© (ch·ª©a th√¥ng tin planId)
      let treatmentPhases = [];
      if (doctorId) {
        try {
          const phasesResponse = await axiosClient.get(
            `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
          );
          treatmentPhases = phasesResponse.data || [];
          console.log(
            "‚úÖ [apiDoctor] Treatment phases loaded:",
            treatmentPhases.length
          );
        } catch (error) {
          console.warn(
            "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y treatment phases:",
            error.message
          );
        }
      }

      // T√≠nh to√°n th·ªëng k√™ chi ti·∫øt
      const today = new Date().toDateString();

      // L·ªãch h·∫πn h√¥m nay (t·ª´ treatment phases ho·∫∑c appointments)
      const todayAppointments = treatmentPhases.filter(
        (phase) =>
          phase.startDate && new Date(phase.startDate).toDateString() === today
      ).length;

      // üÜï ƒêANG ƒêI·ªÄU TR·ªä: ƒê·∫øm unique planId t·ª´ treatment phases 
      // (API ch·ªâ tr·∫£ v·ªÅ active treatment plans, n√™n m·ªói planId = 1 b·ªánh nh√¢n ƒëang ƒëi·ªÅu tr·ªã)
      const uniqueActivePlans = new Set();
      treatmentPhases.forEach((phase) => {
        if (phase.planId) {
          uniqueActivePlans.add(phase.planId);
        }
      });
      const inTreatment = uniqueActivePlans.size;

      // üÜï ƒê√É HO√ÄN TH√ÄNH: T√≠nh t·ª´ patient status 
      // (v√¨ API kh√¥ng tr·∫£ v·ªÅ completed plans, d√πng patient status l√†m fallback)
      let completed = 0;
      if (patients.length > 0) {
        patients.forEach((patient) => {
          if (
            patient.status === "completed" ||
            patient.profileStatus === "completed"
          ) {
            completed++;
          }
        });
      }

      // üÜï T·ªà L·ªÜ TH√ÄNH C√îNG: (completed patients / total patients) * 100
      const totalPatientsForSuccess = patients.length;
      const successRate =
        totalPatientsForSuccess > 0 ? Math.round((completed / totalPatientsForSuccess) * 100) : 0;

      // Fallback: N·∫øu kh√¥ng c√≥ treatment phases, t√≠nh to√°n t·ª´ profile status c·ªßa patients
      let fallbackInTreatment = 0;
      let fallbackCompleted = 0;

      if (treatmentPhases.length === 0 && patients.length > 0) {
        patients.forEach((patient) => {
          if (
            patient.status === "active" ||
            patient.profileStatus === "active"
          ) {
            fallbackInTreatment++;
          } else if (
            patient.status === "completed" ||
            patient.profileStatus === "completed"
          ) {
            fallbackCompleted++;
          }
        });
      }

      const stats = {
        totalPatients: totalPatients,
        todayAppointments: todayAppointments,
        inTreatment: treatmentPhases.length > 0 ? inTreatment : fallbackInTreatment,
        completed: treatmentPhases.length > 0 ? completed : fallbackCompleted,
        successRate:
          treatmentPhases.length > 0
            ? successRate
            : totalPatients > 0
            ? Math.round((fallbackCompleted / totalPatients) * 100)
            : 0,
      };

      console.log("‚úÖ [apiDoctor] Th·ªëng k√™ dashboard:", stats);
      return stats;
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh:",
        error.message
      );

      // Tr·∫£ v·ªÅ th·ªëng k√™ m·∫∑c ƒë·ªãnh thay v√¨ throw error
      const defaultStats = {
        totalPatients: 0,
        todayAppointments: 0,
        inTreatment: 0,
        completed: 0,
        successRate: 0,
      };

      console.log("‚úÖ [apiDoctor] S·ª≠ d·ª•ng th·ªëng k√™ m·∫∑c ƒë·ªãnh:", defaultStats);
      return defaultStats;
    }
  },

  // =================== PATIENT MANAGEMENT ===================
  getMyPatients: async () => {
    try {
      console.log("üë• [apiDoctor] L·∫•y danh s√°ch b·ªánh nh√¢n...");
      const response = await axiosClient.get(
        "/api/doctor/schedule/my-patients"
      );
      console.log("‚úÖ [apiDoctor] Danh s√°ch b·ªánh nh√¢n:", response.data);

      // Transform data t·ª´ API response th√†nh format mong mu·ªën
      const patients = await Promise.all(
        response.data.patients.map(async (patient) => {
          // L·∫•y th√¥ng tin d·ªãch v·ª• ch√≠nh x√°c t·ª´ API
          let treatmentType = "Kh√°m l√¢m s√†ng"; // Default
          let servicePackage = "BASIC";

          try {
            const serviceInfo = await apiDoctor.getPatientServiceInfo(
              patient.patientId
            );
            treatmentType = serviceInfo.treatmentType;
            servicePackage = serviceInfo.servicePackage;
          } catch (error) {
            console.warn(
              `‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y th√¥ng tin d·ªãch v·ª• cho b·ªánh nh√¢n ${patient.patientId}:`,
              error.message
            );

            // Fallback: D·ª±a v√†o th√¥ng tin c√≥ s·∫µn
            if (patient.healthBackground) {
              const healthLower = patient.healthBackground.toLowerCase();
              if (
                healthLower.includes("ivf") ||
                healthLower.includes("th·ª• tinh ·ªëng nghi·ªám")
              ) {
                treatmentType = "IVF";
                servicePackage = "IVF_PREMIUM";
              } else if (
                healthLower.includes("icsi") ||
                healthLower.includes("ti√™m tinh tr√πng")
              ) {
                treatmentType = "ICSI";
                servicePackage = "ICSI_STANDARD";
              } else if (
                healthLower.includes("iui") ||
                healthLower.includes("th·ª• tinh nh√¢n t·∫°o")
              ) {
                treatmentType = "IUI";
                servicePackage = "IUI_BASIC";
              }
            }
          }

          return {
            id: patient.patientId,
            fullName: patient.fullName,
            age: patient.dateOfBirth
              ? new Date().getFullYear() -
                new Date(patient.dateOfBirth).getFullYear()
              : null,
            gender: patient.gender,
            dateOfBirth: patient.dateOfBirth,
            phone: patient.phone,
            email: patient.email,
            status: patient.profileStatus || "active",
            treatmentType: treatmentType,
            nextAppointment: patient.latestAppointment,
            progress: apiDoctor.calculateProgressFromPhase(
              patient.profileStatus
            ),
            servicePackage: servicePackage,
            createdAt: patient.latestAppointment,
            appointmentCount: patient.appointmentCount,
            latestAppointmentStatus: patient.latestAppointmentStatus,
            maritalStatus: patient.maritalStatus,
            healthBackground: patient.healthBackground,
            notes: patient.notes,
            avatarUrl: patient.avatarUrl,
            address: patient.address,
          };
        })
      );

      return patients;
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói l·∫•y danh s√°ch b·ªánh nh√¢n:", error);
      throw error;
    }
  },

  getPatientDetails: async (patientId) => {
    try {
      console.log(`üë§ [apiDoctor] L·∫•y chi ti·∫øt b·ªánh nh√¢n ${patientId}...`);

      // Th·ª≠ l·∫•y t·ª´ clinical results tr∆∞·ªõc
      try {
        const response = await axiosClient.get(
          `/api/clinical-results/patient/${patientId}`
        );
        if (response.data && response.data.length > 0) {
          const latestResult = response.data[0];
          console.log(
            "‚úÖ [apiDoctor] Chi ti·∫øt b·ªánh nh√¢n t·ª´ clinical results:",
            latestResult
          );
          return {
            id: patientId,
            name: latestResult.patientName || `B·ªánh nh√¢n ${patientId}`,
            diagnosis: latestResult.diagnosis,
            recommendations: latestResult.recommendations,
            examinationDate: latestResult.examinationDate,
            status: "active",
          };
        }
      } catch (clinicalError) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y t·ª´ clinical results:",
          clinicalError.message
        );
      }

      // Th·ª≠ l·∫•y t·ª´ treatment workflow
      try {
        // S·ª≠ d·ª•ng role-appropriate endpoint
        const user = localStorage.getItem("user");
        let doctorId = null;
        if (user) {
          const userData = JSON.parse(user);
          doctorId = userData.id || userData.userId;
        }

        // DOCTOR s·ª≠ d·ª•ng doctor phases endpoint
        const response = await axiosClient.get(
          `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
        );
        if (response.data && response.data.length > 0) {
          const latestTreatment = response.data[0];
          console.log(
            "‚úÖ [apiDoctor] Chi ti·∫øt b·ªánh nh√¢n t·ª´ treatment history:",
            latestTreatment
          );
          return {
            id: patientId,
            name: latestTreatment.patientName || `B·ªánh nh√¢n ${patientId}`,
            treatmentType: latestTreatment.treatmentType,
            status: latestTreatment.status || "active",
            startDate: latestTreatment.startDate,
          };
        }
      } catch (treatmentError) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y t·ª´ treatment workflow:",
          treatmentError.message
        );
      }

      // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
      const defaultData = {
        id: patientId,
        name: `B·ªánh nh√¢n ${patientId}`,
        status: "active",
        treatmentType: "IUI",
      };
      console.log("‚úÖ [apiDoctor] S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh:", defaultData);
      return defaultData;
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói l·∫•y chi ti·∫øt b·ªánh nh√¢n:", error);
      // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh thay v√¨ throw error
      return {
        id: patientId,
        name: `B·ªánh nh√¢n ${patientId}`,
        status: "active",
        treatmentType: "IUI",
      };
    }
  },

  // L·∫•y th√¥ng tin d·ªãch v·ª• c·ªßa b·ªánh nh√¢n t·ª´ specialty c·ªßa b√°c sƒ© hi·ªán t·∫°i
  getPatientServiceInfo: async (patientId) => {
    try {
      console.log(
        `üîç [apiDoctor] L·∫•y th√¥ng tin d·ªãch v·ª• c·ªßa b·ªánh nh√¢n ${patientId}...`
      );

      // L·∫•y doctorId t·ª´ localStorage
      const user = localStorage.getItem("user");
      let doctorId = null;
      if (user) {
        try {
          const userData = JSON.parse(user);
          doctorId = userData.id || userData.userId;
        } catch (e) {
          console.error("‚ùå [apiDoctor] L·ªói parse user data:", e);
        }
      }

      if (!doctorId) {
        throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin b√°c sƒ©");
      }

      // Priority 1: L·∫•y t·ª´ specialty c·ªßa b√°c sƒ© hi·ªán t·∫°i
      try {
        console.log("üîç [apiDoctor] L·∫•y specialty c·ªßa b√°c sƒ© hi·ªán t·∫°i...");
        const doctorProfileResponse = await axiosClient.get(
          `/api/profiles/doctor/me`
        );

        if (
          doctorProfileResponse.data &&
          doctorProfileResponse.data.specialty
        ) {
          const doctorSpecialty =
            doctorProfileResponse.data.specialty.toUpperCase();
          console.log("‚úÖ [apiDoctor] Specialty c·ªßa b√°c sƒ©:", doctorSpecialty);

          // Mapping specialty v·ªõi treatment type
          let treatmentType = "Kh√°m l√¢m s√†ng";
          let servicePackage = "BASIC";

          switch (doctorSpecialty) {
            case "IUI":
              treatmentType = "IUI";
              servicePackage = "IUI_PACKAGE";
              break;
            case "IVF":
              treatmentType = "IVF";
              servicePackage = "IVF_PACKAGE";
              break;
            case "ICSI":
              treatmentType = "ICSI";
              servicePackage = "ICSI_PACKAGE";
              break;
            default:
              console.warn(
                "‚ö†Ô∏è [apiDoctor] Specialty kh√¥ng x√°c ƒë·ªãnh:",
                doctorSpecialty
              );
          }

          return {
            serviceId: doctorId, // S·ª≠ d·ª•ng doctorId l√†m serviceId
            serviceName: doctorSpecialty,
            treatmentType: treatmentType,
            servicePackage: servicePackage,
            doctorSpecialty: doctorSpecialty,
          };
        }
      } catch (error) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y specialty c·ªßa b√°c sƒ©:",
          error.message
        );
      }

      // Priority 2: Th·ª≠ l·∫•y t·ª´ treatment plans
      try {
        const treatmentPlan = await apiDoctor.getPatientTreatmentPlan(
          patientId
        );

        if (treatmentPlan) {
          return {
            serviceId: treatmentPlan.planId,
            serviceName: treatmentPlan.treatmentType,
            treatmentType: treatmentPlan.treatmentType,
            servicePackage: `${treatmentPlan.treatmentType.toUpperCase()}_PACKAGE`,
          };
        }
      } catch (error) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y t·ª´ treatment plans:",
          error.message
        );
      }

      // Priority 3: Th·ª≠ l·∫•y t·ª´ clinical results
      try {
        const clinicalResultsResponse = await axiosClient.get(
          `/api/clinical-results/patient/${patientId}`
        );

        const results = clinicalResultsResponse.data || [];
        if (results.length > 0) {
          const latestResult = results[0];
          // D·ª±a v√†o diagnosis ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i d·ªãch v·ª•
          let treatmentType = "Kh√°m l√¢m s√†ng";
          if (latestResult.diagnosis) {
            const diagnosis = latestResult.diagnosis.toLowerCase();
            if (
              diagnosis.includes("ivf") ||
              diagnosis.includes("th·ª• tinh ·ªëng nghi·ªám")
            ) {
              treatmentType = "IVF";
            } else if (
              diagnosis.includes("icsi") ||
              diagnosis.includes("ti√™m tinh tr√πng")
            ) {
              treatmentType = "ICSI";
            } else if (
              diagnosis.includes("iui") ||
              diagnosis.includes("th·ª• tinh nh√¢n t·∫°o")
            ) {
              treatmentType = "IUI";
            }
          }

          return {
            serviceId: latestResult.resultId,
            serviceName: treatmentType,
            treatmentType: treatmentType,
            servicePackage: `${treatmentType.toUpperCase()}_PACKAGE`,
          };
        }
      } catch (error) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y t·ª´ clinical results:",
          error.message
        );
      }

      // Fallback: Tr·∫£ v·ªÅ d·ªãch v·ª• m·∫∑c ƒë·ªãnh
      console.log("‚úÖ [apiDoctor] S·ª≠ d·ª•ng d·ªãch v·ª• m·∫∑c ƒë·ªãnh");
      return {
        serviceId: "default",
        serviceName: "Kh√°m l√¢m s√†ng",
        treatmentType: "Kh√°m l√¢m s√†ng",
        servicePackage: "BASIC",
      };
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói l·∫•y th√¥ng tin d·ªãch v·ª•:", error);
      throw error;
    }
  },

  // =================== APPOINTMENTS ===================
  getTodayAppointments: async () => {
    try {
      console.log("üìÖ [apiDoctor] L·∫•y l·ªãch h·∫πn h√¥m nay...");

      // L·∫•y doctorId t·ª´ localStorage
      const user = localStorage.getItem("user");
      let doctorId = null;

      if (user) {
        try {
          const userData = JSON.parse(user);
          doctorId = userData.id || userData.userId;
          console.log("üîç [apiDoctor] User data:", userData);
          console.log("üîç [apiDoctor] DoctorId:", doctorId);
        } catch (e) {
          console.error("‚ùå [apiDoctor] L·ªói parse user data:", e);
        }
      }

      // Th·ª≠ l·∫•y appointments t·ª´ treatment phases tr∆∞·ªõc
      let todayAppointments = [];
      if (doctorId) {
        try {
          const response = await axiosClient.get(
            `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
          );
          const phases = response.data || [];
          console.log("‚úÖ [apiDoctor] Treatment phases loaded:", phases.length);

          // L·ªçc phases h√¥m nay
          const today = new Date().toDateString();
          const todayPhases = phases.filter(
            (phase) =>
              phase.startDate &&
              new Date(phase.startDate).toDateString() === today
          );

          // Transform th√†nh format l·ªãch h·∫πn
          todayAppointments = todayPhases.map((phase) => ({
            id: phase.phaseId || `phase-${Date.now()}`,
            time: phase.startDate
              ? new Date(phase.startDate).toLocaleTimeString("vi-VN", {
                  hour: "2-digit",
                  minute: "2-digit",
                })
              : "09:00",
            patientName: `B·ªánh nh√¢n ${phase.patientId}`,
            service: phase.phaseName || "Kh√°m l√¢m s√†ng",
            status: phase.status || "Scheduled",
            type: "Treatment",
            notes: phase.description || "",
          }));
        } catch (error) {
          console.warn(
            "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y treatment phases:",
            error.message
          );
        }
      }

      // TODO: Handle empty appointments
      if (todayAppointments.length === 0) {
        console.log("‚ÑπÔ∏è [apiDoctor] No appointments found for today");
      }

      console.log("‚úÖ [apiDoctor] L·ªãch h·∫πn h√¥m nay:", todayAppointments.length);
      return todayAppointments;
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y l·ªãch h·∫πn, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh:",
        error.message
      );

      // Tr·∫£ v·ªÅ l·ªãch h·∫πn m·∫´u thay v√¨ throw error
      const defaultAppointments = [
        {
          id: "default-1",
          time: "09:00",
          patientName: "B·ªánh nh√¢n m·∫´u 1",
          service: "Kh√°m l√¢m s√†ng",
          status: "Scheduled",
          type: "Consultation",
          notes: "L·ªãch h·∫πn kh√°m ƒë·ªãnh k·ª≥",
        },
        {
          id: "default-2",
          time: "10:30",
          patientName: "B·ªánh nh√¢n m·∫´u 2",
          service: "T∆∞ v·∫•n ƒëi·ªÅu tr·ªã",
          status: "Scheduled",
          type: "Consultation",
          notes: "T∆∞ v·∫•n ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
        },
      ];

      return defaultAppointments;
    }
  },

  // üÜï L·∫•y l·ªãch h·∫πn theo ng√†y c·ª• th·ªÉ
  getAppointmentsByDate: async (date) => {
    try {
      console.log("üìÖ [apiDoctor] L·∫•y l·ªãch h·∫πn cho ng√†y:", date);

      // L·∫•y doctorId t·ª´ localStorage
      const user = localStorage.getItem("user");
      let doctorId = null;

      if (user) {
        try {
          const userData = JSON.parse(user);
          doctorId = userData.id || userData.userId;
        } catch (e) {
          console.error("‚ùå [apiDoctor] L·ªói parse user data:", e);
        }
      }

      // Th·ª≠ l·∫•y appointments t·ª´ API backend
      let appointments = [];
      if (doctorId) {
        try {
          // G·ªçi API backend ƒë·ªÉ l·∫•y appointments theo ng√†y
          const response = await axiosClient.get(
            `/api/doctor/schedule/my-appointments?date=${date}`
          );
          
          if (response.data && response.data.appointments) {
            appointments = response.data.appointments.map((appointment) => ({
              id: appointment.appointmentId,
              time: appointment.appointmentTime 
                ? new Date(appointment.appointmentTime).toLocaleTimeString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })
                : "09:00",
              patientName: appointment.customer?.name || `B·ªánh nh√¢n ${appointment.customerId}`,
              service: "Kh√°m l√¢m s√†ng",
              status: appointment.checkInStatus || "Scheduled",
              type: "Consultation",
              notes: "L·ªãch h·∫πn kh√°m",
              room: appointment.room,
            }));
          }
          
          console.log("‚úÖ [apiDoctor] Appointments from API:", appointments.length);
        } catch (error) {
          console.warn(
            "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y appointments t·ª´ API:",
            error.message
          );
          
          // Fallback: th·ª≠ l·∫•y t·ª´ treatment phases
          try {
            const response = await axiosClient.get(
              `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
            );
            const phases = response.data || [];

            // L·ªçc phases theo ng√†y
            const targetDate = new Date(date).toDateString();
            const targetPhases = phases.filter(
              (phase) =>
                phase.startDate &&
                new Date(phase.startDate).toDateString() === targetDate
            );

            // Transform th√†nh format l·ªãch h·∫πn
            appointments = targetPhases.map((phase) => ({
              id: phase.phaseId || `phase-${Date.now()}`,
              time: phase.startDate
                ? new Date(phase.startDate).toLocaleTimeString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })
                : "09:00",
              patientName: `B·ªánh nh√¢n ${phase.patientId}`,
              service: phase.phaseName || "Kh√°m l√¢m s√†ng",
              status: phase.status || "Scheduled",
              type: "Treatment",
              notes: phase.description || "",
            }));
          } catch (phaseError) {
            console.warn(
              "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y treatment phases:",
              phaseError.message
            );
          }
        }
      }

      console.log("‚úÖ [apiDoctor] L·ªãch h·∫πn cho ng√†y", date, ":", appointments.length);
      return appointments;
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói l·∫•y l·ªãch h·∫πn theo ng√†y:", error);
      return [];
    }
  },

  getMySchedule: async () => {
    try {
      console.log("üìã [apiDoctor] L·∫•y l·ªãch tr√¨nh b√°c sƒ©...");
      const response = await axiosClient.get("/api/doctor/schedule");
      console.log("‚úÖ [apiDoctor] L·ªãch tr√¨nh:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói l·∫•y l·ªãch tr√¨nh:", error);
      throw error;
    }
  },

  // =================== TREATMENT MANAGEMENT ===================

  // L·∫•y th√¥ng tin treatment plan c·ªßa b·ªánh nh√¢n
  getPatientTreatmentPlan: async (patientId) => {
    try {
      console.log(
        `üîç [apiDoctor] L·∫•y treatment plan c·ªßa b·ªánh nh√¢n ${patientId}...`
      );

      // L·∫•y doctorId t·ª´ localStorage
      const user = localStorage.getItem("user");
      let doctorId = null;
      if (user) {
        try {
          const userData = JSON.parse(user);
          doctorId = userData.id || userData.userId;
        } catch (e) {
          console.error("‚ùå [apiDoctor] L·ªói parse user data:", e);
        }
      }

      if (!doctorId) {
        throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin b√°c sƒ©");
      }

      // L·∫•y treatment plans c·ªßa b√°c sƒ©
      const treatmentPlansResponse = await axiosClient.get(
        `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
      );

      const phases = treatmentPlansResponse.data || [];
      const patientPhase = phases.find(
        (phase) => phase.patientId === patientId
      );

      if (patientPhase) {
        // L·∫•y chi ti·∫øt treatment plan
        const planResponse = await axiosClient.get(
          `/api/treatment-workflow/treatment-plan/${patientPhase.planId}/phases`
        );

        if (planResponse.data && planResponse.data.length > 0) {
          return {
            planId: patientPhase.planId,
            treatmentType: patientPhase.treatmentType || "ƒêi·ªÅu tr·ªã v√¥ sinh",
            status: patientPhase.status || "active",
            phases: planResponse.data,
          };
        }
      }

      return null;
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y treatment plan:",
        error.message
      );
      return null;
    }
  },

  createTreatmentPlan: async (treatmentData) => {
    try {
      console.log("üìù [apiDoctor] T·∫°o ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã...", treatmentData);
      const response = await axiosClient.post(
        "/api/treatment-plans",
        treatmentData
      );
      console.log("‚úÖ [apiDoctor] T·∫°o ph√°c ƒë·ªì th√†nh c√¥ng:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói t·∫°o ph√°c ƒë·ªì:", error);
      throw error;
    }
  },

  updateTreatmentProgress: async (patientId, progressData) => {
    try {
      console.log(
        `üîÑ [apiDoctor] C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô ƒëi·ªÅu tr·ªã cho b·ªánh nh√¢n ${patientId}...`
      );
      const response = await axiosClient.put(
        `/api/treatment-plans/${patientId}/progress`,
        progressData
      );
      console.log("‚úÖ [apiDoctor] C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô th√†nh c√¥ng:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô:", error);
      throw error;
    }
  },

  // L·∫•y ti·∫øn ƒë·ªô ƒëi·ªÅu tr·ªã c·ªßa b·ªánh nh√¢n
  getTreatmentProgress: async (patientId) => {
    try {
      console.log(
        `üìä [apiDoctor] L·∫•y ti·∫øn ƒë·ªô ƒëi·ªÅu tr·ªã c·ªßa b·ªánh nh√¢n ${patientId}...`
      );

      // L·∫•y doctorId t·ª´ localStorage
      const userStr = localStorage.getItem("user");
      const user = userStr ? JSON.parse(userStr) : null;
      const doctorId = user?.id || user?.userId;

      console.log("üîç [apiDoctor] User data:", user);
      console.log("üîç [apiDoctor] DoctorId:", doctorId);

      if (!doctorId) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng t√¨m th·∫•y doctorId, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh"
        );
        // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh thay v√¨ throw error
        const defaultProgress = {
          data: {
            totalSessions: 12,
            completedSessions: 0,
            upcomingSessions: 12,
            currentPhase: "Ch∆∞a b·∫Øt ƒë·∫ßu",
            phaseProgress: 0,
            overallProgress: 0,
            lastUpdated: new Date().toLocaleDateString("vi-VN"),
            recentActivities: [],
          },
        };
        return defaultProgress;
      }

      // G·ªçi API cho b√°c sƒ© ƒë·ªÉ l·∫•y t·∫•t c·∫£ treatment phases
      let response;
      try {
        response = await axiosClient.get(
          `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
        );
        console.log("‚úÖ [apiDoctor] T·∫•t c·∫£ treatment phases:", response.data);
      } catch (apiError) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y treatment phases t·ª´ API:",
          apiError.message
        );
        // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh thay v√¨ throw error
        const defaultProgress = {
          data: {
            totalSessions: 12,
            completedSessions: 0,
            upcomingSessions: 12,
            currentPhase: "Ch∆∞a b·∫Øt ƒë·∫ßu",
            phaseProgress: 0,
            overallProgress: 0,
            lastUpdated: new Date().toLocaleDateString("vi-VN"),
            recentActivities: [],
          },
        };
        return defaultProgress;
      }

      // L·ªçc phases cho patientId c·ª• th·ªÉ
      const allPhases = response.data || [];
      const patientPhases = allPhases.filter(
        (phase) => phase.patientId === patientId
      );

      console.log("‚úÖ [apiDoctor] Phases cho b·ªánh nh√¢n:", patientPhases);

      // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ backend ƒë·ªÉ t·∫°o progress object
      const totalPhases = patientPhases.length;
      const completedPhases = patientPhases.filter(
        (phase) => phase.status === "Completed"
      ).length;
      const inProgressPhases = patientPhases.filter(
        (phase) => phase.status === "In Progress"
      );
      const currentPhase =
        inProgressPhases.length > 0
          ? inProgressPhases[0].phaseName
          : completedPhases === totalPhases
          ? "Ho√†n th√†nh"
          : "Ch∆∞a b·∫Øt ƒë·∫ßu";

      const overallProgress =
        totalPhases > 0 ? Math.round((completedPhases / totalPhases) * 100) : 0;

      const progressData = {
        data: {
          totalSessions: totalPhases,
          completedSessions: completedPhases,
          upcomingSessions: totalPhases - completedPhases,
          currentPhase: currentPhase,
          phaseProgress: inProgressPhases.length > 0 ? 50 : 0, // Gi·∫£ s·ª≠ phase ƒëang th·ª±c hi·ªán ·ªü 50%
          overallProgress: overallProgress,
          lastUpdated: new Date().toLocaleDateString("vi-VN"),
          recentActivities: patientPhases.map((phase) => ({
            phase: phase.phaseName,
            status: phase.status,
            date:
              phase.startDate ||
              phase.endDate ||
              new Date().toLocaleDateString("vi-VN"),
          })),
          phases: patientPhases, // Th√™m th√¥ng tin chi ti·∫øt v·ªÅ c√°c phases
        },
      };

      return progressData;
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y ti·∫øn ƒë·ªô t·ª´ API, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh:",
        error.message
      );

      // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh thay v√¨ throw error
      const defaultProgress = {
        data: {
          totalSessions: 12,
          completedSessions: 0,
          upcomingSessions: 12,
          currentPhase: "Ch∆∞a b·∫Øt ƒë·∫ßu",
          phaseProgress: 0,
          overallProgress: 0,
          lastUpdated: new Date().toLocaleDateString("vi-VN"),
          recentActivities: [],
        },
      };

      console.log("‚úÖ [apiDoctor] S·ª≠ d·ª•ng ti·∫øn ƒë·ªô m·∫∑c ƒë·ªãnh:", defaultProgress);
      return defaultProgress;
    }
  },

  // L·∫•y th√¥ng tin b·ªánh nh√¢n
  getPatientInfo: async (patientId) => {
    try {
      console.log(`üë§ [apiDoctor] L·∫•y th√¥ng tin b·ªánh nh√¢n ${patientId}...`);

      // Th·ª≠ l·∫•y t·ª´ danh s√°ch b·ªánh nh√¢n c·ªßa b√°c sƒ© tr∆∞·ªõc (endpoint n√†y ch·∫Øc ch·∫Øn t·ªìn t·∫°i)
      try {
        const myPatientsResponse = await axiosClient.get(
          "/api/doctor/schedule/my-patients"
        );
        const patient = myPatientsResponse.data.patients?.find(
          (p) => p.patientId === patientId || p.id === patientId
        );
        if (patient) {
          console.log(
            "‚úÖ [apiDoctor] T√¨m th·∫•y b·ªánh nh√¢n trong danh s√°ch:",
            patient
          );
          return { data: patient };
        }
      } catch (myPatientsError) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y danh s√°ch b·ªánh nh√¢n:",
          myPatientsError.message
        );
      }

      // Th·ª≠ l·∫•y t·ª´ clinical results
      try {
        const response = await axiosClient.get(
          `/api/clinical-results/patient/${patientId}`
        );
        if (response.data && response.data.length > 0) {
          const latestResult = response.data[0];
          console.log(
            "‚úÖ [apiDoctor] Th√¥ng tin b·ªánh nh√¢n t·ª´ clinical results:",
            latestResult
          );
          return { data: latestResult };
        }
      } catch (clinicalError) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y t·ª´ clinical results:",
          clinicalError.message
        );
      }

      // Th·ª≠ API profiles (ch·ªâ cho user hi·ªán t·∫°i)
      try {
        const response = await axiosClient.get(`/api/profiles/me`);
        console.log(
          "‚úÖ [apiDoctor] Th√¥ng tin user hi·ªán t·∫°i t·ª´ /api/profiles/me:",
          response.data
        );
        // Ch·ªâ tr·∫£ v·ªÅ n·∫øu ƒë√¢y l√† th√¥ng tin c·ªßa patient c·∫ßn t√¨m
        if (response.data && response.data.id === patientId) {
          return response.data;
        }
      } catch (profilesError) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y t·ª´ /api/profiles/me:",
          profilesError.message
        );
      }

      // N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh
      console.warn(
        "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y th√¥ng tin b·ªánh nh√¢n t·ª´ b·∫•t k·ª≥ API n√†o"
      );

      const defaultPatientInfo = {
        data: {
          id: patientId,
          name: `B·ªánh nh√¢n ${patientId}`,
          gender: "unknown",
          age: null,
          contact: null,
          email: null,
          address: null,
          status: "active",
        },
      };

      console.log(
        "‚úÖ [apiDoctor] S·ª≠ d·ª•ng th√¥ng tin b·ªánh nh√¢n m·∫∑c ƒë·ªãnh:",
        defaultPatientInfo
      );
      return defaultPatientInfo;
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è [apiDoctor] L·ªói kh√¥ng mong mu·ªën khi l·∫•y th√¥ng tin b·ªánh nh√¢n:",
        error.message
      );

      // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh thay v√¨ throw error
      const defaultPatientInfo = {
        data: {
          id: patientId,
          name: `B·ªánh nh√¢n ${patientId}`,
          gender: "unknown",
          age: null,
          contact: null,
          email: null,
          address: null,
          status: "active",
        },
      };

      console.log(
        "‚úÖ [apiDoctor] S·ª≠ d·ª•ng th√¥ng tin b·ªánh nh√¢n m·∫∑c ƒë·ªãnh:",
        defaultPatientInfo
      );
      return defaultPatientInfo;
    }
  },

  // L·∫•y th√¥ng tin ƒëi·ªÅu tr·ªã c·ªßa b·ªánh nh√¢n
  getPatientTreatmentPhases: async (patientId) => {
    try {
      console.log(
        `üè• [apiDoctor] L·∫•y th√¥ng tin ƒëi·ªÅu tr·ªã c·ªßa b·ªánh nh√¢n ${patientId}...`
      );
      const response = await axiosClient.get(
        `/api/treatment-workflow/patient/${patientId}/treatment-phases`
      );
      console.log("‚úÖ [apiDoctor] Th√¥ng tin ƒëi·ªÅu tr·ªã:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói l·∫•y th√¥ng tin ƒëi·ªÅu tr·ªã:", error);
      throw error;
    }
  },

  // L·∫•y l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã c·ªßa b·ªánh nh√¢n
  getPatientTreatmentHistory: async (patientId) => {
    try {
      console.log(
        `üìã [apiDoctor] L·∫•y l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã c·ªßa b·ªánh nh√¢n ${patientId}...`
      );

      // S·ª≠ d·ª•ng role-appropriate endpoint
      const user = localStorage.getItem("user");
      let doctorId = null;
      if (user) {
        const userData = JSON.parse(user);
        doctorId = userData.id || userData.userId;
      }

      // DOCTOR s·ª≠ d·ª•ng doctor phases endpoint v√† l·ªçc theo patientId
      const response = await axiosClient.get(
        `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
      );

      // L·ªçc phases theo patientId
      if (response.data && Array.isArray(response.data)) {
        const patientPhases = response.data.filter(
          (phase) =>
            phase.patientId === patientId || phase.patient?.id === patientId
        );
        console.log("‚úÖ [apiDoctor] L·ªãch s·ª≠ ƒëi·ªÅu tr·ªã:", patientPhases);
        return patientPhases;
      }

      console.log("‚úÖ [apiDoctor] Kh√¥ng c√≥ l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã");
      return [];
    } catch (error) {
      console.error("‚ùå [apiDoctor] L·ªói l·∫•y l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã:", error);
      throw error;
    }
  },

  // L·∫•y k·∫øt qu·∫£ kh√°m l√¢m s√†ng c·ªßa b·ªánh nh√¢n
  getPatientClinicalResults: async (patientId) => {
    try {
      console.log(
        `üî¨ [apiDoctor] L·∫•y k·∫øt qu·∫£ kh√°m l√¢m s√†ng c·ªßa b·ªánh nh√¢n ${patientId}...`
      );

      // Th·ª≠ API clinical-results tr∆∞·ªõc
      try {
        const response = await axiosClient.get(
          `/api/clinical-results/patient/${patientId}`
        );
        console.log("‚úÖ [apiDoctor] K·∫øt qu·∫£ kh√°m l√¢m s√†ng:", response.data);
        return response.data;
      } catch (clinicalError) {
        console.warn(
          "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y t·ª´ clinical-results, th·ª≠ treatment-workflow:",
          clinicalError.message
        );

        // Th·ª≠ API treatment-workflow
        try {
          const response = await axiosClient.get(
            `/api/treatment-workflow/patient/${patientId}/clinical-results`
          );
          console.log(
            "‚úÖ [apiDoctor] K·∫øt qu·∫£ kh√°m l√¢m s√†ng t·ª´ treatment-workflow:",
            response.data
          );
          return response.data;
        } catch (treatmentError) {
          console.warn(
            "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y t·ª´ treatment-workflow:",
            treatmentError.message
          );

          // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh thay v√¨ throw error
          const defaultResults = [];
          console.log(
            "‚úÖ [apiDoctor] S·ª≠ d·ª•ng k·∫øt qu·∫£ kh√°m m·∫∑c ƒë·ªãnh:",
            defaultResults
          );
          return defaultResults;
        }
      }
    } catch (error) {
      console.warn(
        "‚ö†Ô∏è [apiDoctor] Kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£ kh√°m t·ª´ API:",
        error.message
      );

      // Tr·∫£ v·ªÅ d·ªØ li·ªáu m·∫∑c ƒë·ªãnh thay v√¨ throw error
      const defaultResults = [];
      console.log(
        "‚úÖ [apiDoctor] S·ª≠ d·ª•ng k·∫øt qu·∫£ kh√°m m·∫∑c ƒë·ªãnh:",
        defaultResults
      );
      return defaultResults;
    }
  },

  // =================== UTILITY FUNCTIONS ===================
  transformPatientData: (rawPatient) => {
    // Transform API response to match UI expectations
    const transformed = {
      id: rawPatient.id || rawPatient.patientId,
      name:
        rawPatient.fullName ||
        rawPatient.name ||
        `B·ªánh nh√¢n ${rawPatient.id || rawPatient.patientId}`,
      fullName:
        rawPatient.fullName ||
        rawPatient.name ||
        `B·ªánh nh√¢n ${rawPatient.id || rawPatient.patientId}`,
      age:
        rawPatient.age ||
        (rawPatient.dateOfBirth
          ? new Date().getFullYear() -
            new Date(rawPatient.dateOfBirth).getFullYear()
          : 30), // Default age if not available
      gender: rawPatient.gender?.toLowerCase() || "unknown",
      dob: rawPatient.dateOfBirth,
      contact: rawPatient.phone || rawPatient.contact,
      email: rawPatient.email,
      status: rawPatient.status || rawPatient.profileStatus || "active",
      treatmentType:
        rawPatient.treatmentType || rawPatient.serviceName || "IVF",
      nextAppointment:
        rawPatient.nextAppointment || rawPatient.latestAppointment,
      progress:
        rawPatient.progress ||
        apiDoctor.calculateProgressFromPhase(
          rawPatient.status || rawPatient.profileStatus
        ),
      servicePackage:
        rawPatient.servicePackage || rawPatient.serviceName || "IVF_PREMIUM",
      createdAt: rawPatient.createdAt,
    };

    console.log("üîÑ [apiDoctor] Transformed patient data:", transformed);
    return transformed;
  },

  // Helper function ƒë·ªÉ t√≠nh progress t·ª´ profile status
  calculateProgressFromPhase: (status) => {
    switch (status) {
      case "pending":
        return 10;
      case "active":
        return 50;
      case "completed":
        return 100;
      case "cancelled":
        return 0;
      case "inactive":
        return 0;
      default:
        return 25; // Default progress for active patients
    }
  },
};

export default apiDoctor;
