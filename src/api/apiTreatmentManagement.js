import axiosClient from "../services/axiosClient.js";

const apiTreatmentManagement = {
  // Helper function to get current user role
  getCurrentUserRole: () => {
    try {
      const user = localStorage.getItem("user");
      if (user) {
        const userData = JSON.parse(user);
        return userData.role?.toUpperCase();
      }
    } catch (error) {
      console.error("Error getting user role:", error);
    }
    return null;
  },

  // Helper function to check if user has required role
  hasRequiredRole: (requiredRole) => {
    const currentRole = apiTreatmentManagement.getCurrentUserRole();
    return currentRole === requiredRole;
  },

  // Helper function to get appropriate API endpoint based on user role
  getRoleAppropriateEndpoint: (patientId, endpointType) => {
    const userRole = apiTreatmentManagement.getCurrentUserRole();
    const user = localStorage.getItem("user");
    let doctorId = null;
    if (user) {
      const userData = JSON.parse(user);
      doctorId = userData.id || userData.userId;
      console.log(`üîç [apiTreatmentManagement] User data from localStorage:`, {
        userRole,
        doctorId,
        userId: userData.id,
        userUserId: userData.userId,
        rawUserData: userData,
      });
    } else {
      console.warn(`‚ö†Ô∏è [apiTreatmentManagement] No user data in localStorage`);
    }

    // Ki·ªÉm tra quy·ªÅn v√† doctorId tr∆∞·ªõc khi tr·∫£ v·ªÅ endpoint cho b√°c sƒ©
    if (
      endpointType === "treatment-phases" ||
      endpointType === "treatment-history"
    ) {
      if (userRole === "DOCTOR") {
        if (!doctorId) {
          // Kh√¥ng t√¨m th·∫•y doctorId, tr·∫£ v·ªÅ null ƒë·ªÉ b√°o l·ªói
          return null;
        }
        return `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`;
      } else if (userRole === "CUSTOMER" || userRole === "PATIENT") {
        return `/api/treatment-workflow/patient/${patientId}/treatment-phases`;
      }
    }

    switch (endpointType) {
      case "treatment-phases":
        if (userRole === "DOCTOR") {
          // DOCTOR l·∫•y phases t·ªïng h·ª£p v√† s·∫Ω l·ªçc theo patientId ·ªü frontend
          return `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`;
        } else if (userRole === "CUSTOMER" || userRole === "PATIENT") {
          return `/api/treatment-workflow/patient/${patientId}/treatment-phases`;
        }
        break;
      case "treatment-history":
        if (userRole === "DOCTOR") {
          // DOCTOR kh√¥ng c√≥ API ri√™ng, s·∫Ω l·∫•y t·ª´ treatment-phases v√† l·ªçc
          return `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`;
        } else if (userRole === "CUSTOMER" || userRole === "PATIENT") {
          return `/api/treatment-workflow/patient/${patientId}/treatment-history`;
        }
        break;
      case "clinical-results":
        if (userRole === "DOCTOR") {
          // DOCTOR c√≥ th·ªÉ l·∫•y clinical results c·ªßa b·ªánh nh√¢n
          return `/api/clinical-results/patient/${patientId}`;
        } else if (userRole === "CUSTOMER" || userRole === "PATIENT") {
          return `/api/treatment-workflow/patient/${patientId}/clinical-results`;
        }
        break;
    }
    return null;
  },

  // ========== TREATMENT PLAN TEMPLATES ==========

  // L·∫•y t·∫•t c·∫£ templates theo specialty c·ªßa b√°c sƒ©
  getTreatmentPlanTemplates: async () => {
    try {
      const response = await axiosClient.get("/api/treatment-plan-templates");
      return {
        success: true,
        data: response.data,
        message: "L·∫•y danh s√°ch templates th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error fetching treatment plan templates:", error);
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch templates",
      };
    }
  },

  // L·∫•y template theo treatment type
  getTemplateByType: async (treatmentType) => {
    try {
      console.log(
        `üîç [apiTreatmentManagement] Fetching template for type: ${treatmentType}`
      );

      const response = await axiosClient.get(
        `/api/treatment-plan-templates/type/${treatmentType}`
      );
      return {
        success: true,
        data: response.data,
        message: "L·∫•y template th√†nh c√¥ng",
      };
    } catch (error) {
      console.warn(
        `‚ö†Ô∏è [apiTreatmentManagement] Failed to get template by type ${treatmentType}:`,
        error.message
      );

      // Fallback: Try to get all templates and filter by type
      try {
        console.log(
          `üîÑ [apiTreatmentManagement] Trying fallback: get all templates and filter by ${treatmentType}`
        );
        const allTemplatesResponse = await axiosClient.get(
          "/api/treatment-plan-templates"
        );

        if (
          allTemplatesResponse.data &&
          Array.isArray(allTemplatesResponse.data)
        ) {
          const filteredTemplate = allTemplatesResponse.data.find(
            (template) =>
              template.treatmentType?.toUpperCase() ===
              treatmentType.toUpperCase()
          );

          if (filteredTemplate) {
            console.log(
              `‚úÖ [apiTreatmentManagement] Found template using fallback method:`,
              filteredTemplate.name
            );
            return {
              success: true,
              data: filteredTemplate,
              message: "L·∫•y template th√†nh c√¥ng (fallback)",
            };
          }
        }
      } catch (fallbackError) {
        console.error(
          "‚ùå [apiTreatmentManagement] Fallback also failed:",
          fallbackError
        );
      }

      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message ||
          `Kh√¥ng th·ªÉ l·∫•y template cho ${treatmentType}`,
      };
    }
  },

  // Preview template
  previewTemplate: async (treatmentType) => {
    try {
      const response = await axiosClient.get(
        `/api/treatment-plan-templates/preview/${treatmentType}`
      );
      return {
        success: true,
        data: response.data,
        message: "Preview template th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error previewing template:", error);
      return {
        success: false,
        data: null,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ preview template",
      };
    }
  },

  // ========== TREATMENT WORKFLOW ==========

  // T·∫°o ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã t·ª´ k·∫øt qu·∫£ kh√°m l√¢m s√†ng
  createTreatmentPlanFromClinicalResult: async (
    resultId,
    treatmentPlanRequest
  ) => {
    try {
      const response = await axiosClient.post(
        `/api/treatment-workflow/treatment-plan/from-clinical-result/${resultId}`,
        treatmentPlanRequest
      );
      return {
        success: true,
        data: response.data,
        message: "T·∫°o ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error(
        "Error creating treatment plan from clinical result:",
        error
      );
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // Ch·ªânh s·ª≠a ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã
  modifyTreatmentPlan: async (treatmentPlanId, modifications) => {
    try {
      const response = await axiosClient.put(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/modify`,
        modifications
      );
      return {
        success: true,
        data: response.data,
        message: "C·∫≠p nh·∫≠t ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error modifying treatment plan:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // Ho√†n th√†nh ƒëi·ªÅu tr·ªã
  completeTreatmentPlan: async (treatmentPlanId, notes) => {
    try {
      const response = await axiosClient.post(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/complete`,
        null,
        {
          params: { notes },
        }
      );
      return {
        success: true,
        data: response.data,
        message: "Ho√†n th√†nh ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error completing treatment plan:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ ho√†n th√†nh ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // H·ªßy k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã
  cancelTreatmentPlan: async (treatmentPlanId, reason) => {
    try {
      const response = await axiosClient.post(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/cancel`,
        null,
        {
          params: { reason },
        }
      );
      return {
        success: true,
        data: response.data,
        message: "H·ªßy k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error cancelling treatment plan:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ h·ªßy k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i phase
  updatePhaseStatus: async (treatmentPlanId, phaseId, statusRequest) => {
    try {
      const response = await axiosClient.put(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/phase/${phaseId}/status`,
        statusRequest
      );
      return {
        success: true,
        data: response.data,
        message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i phase th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error updating phase status:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i phase",
      };
    }
  },

  // L·∫•y danh s√°ch phases c·ªßa treatment plan
  getTreatmentPlanPhases: async (treatmentPlanId) => {
    try {
      const response = await axiosClient.get(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/phases`
      );
      return {
        success: true,
        data: response.data,
        message: "L·∫•y danh s√°ch phases th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error fetching treatment plan phases:", error);
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch phases",
      };
    }
  },

  // L·∫•y phase hi·ªán t·∫°i
  getCurrentPhase: async (treatmentPlanId) => {
    try {
      const response = await axiosClient.get(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/current-phase`
      );
      return {
        success: true,
        data: response.data,
        message: "L·∫•y phase hi·ªán t·∫°i th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error fetching current phase:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y phase hi·ªán t·∫°i",
      };
    }
  },

  // B√°c sƒ© xem phases ƒëi·ªÅu tr·ªã t·ªïng h·ª£p
  getDoctorTreatmentPhases: async (doctorId) => {
    try {
      const response = await axiosClient.get(
        `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
      );
      return {
        success: true,
        data: response.data,
        message: "L·∫•y danh s√°ch phases t·ªïng h·ª£p th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error fetching doctor treatment phases:", error);
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ l·∫•y danh s√°ch phases t·ªïng h·ª£p",
      };
    }
  },

  // L·∫•y c√°c phase ƒëi·ªÅu tr·ªã d√†nh cho b√°c sƒ© (theo doctorId)
  getDoctorTreatmentPhases: async (doctorId) => {
    try {
      const response = await axiosClient.get(
        `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`,
        {
          headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        }
      );
      return {
        success: true,
        data: response.data,
        message: "L·∫•y danh s√°ch phase ƒëi·ªÅu tr·ªã cho b√°c sƒ© th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error fetching doctor treatment phases:", error);
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ l·∫•y danh s√°ch phase ƒëi·ªÅu tr·ªã cho b√°c sƒ©",
      };
    }
  },

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i phase
  updatePhaseStatus: async (treatmentPlanId, phaseId, statusData) => {
    try {
      const response = await axiosClient.put(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/phase/${phaseId}/status`,
        statusData
      );
      return {
        success: true,
        data: response.data,
        message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i phase th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error updating phase status:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i phase",
      };
    }
  },

  // T·∫°o treatment plan t·ª´ clinical result
  createTreatmentPlanFromClinicalResult: async (resultId, planData) => {
    try {
      const response = await axiosClient.post(
        `/api/treatment-workflow/treatment-plan/from-clinical-result/${resultId}`,
        planData
      );
      return {
        success: true,
        data: response.data,
        message: "T·∫°o ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error creating treatment plan:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // Ch·ªânh s·ª≠a treatment plan
  modifyTreatmentPlan: async (treatmentPlanId, modifications) => {
    try {
      const response = await axiosClient.put(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/modify`,
        modifications
      );
      return {
        success: true,
        data: response.data,
        message: "Ch·ªânh s·ª≠a ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error modifying treatment plan:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ ch·ªânh s·ª≠a ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // Ho√†n th√†nh treatment plan
  completeTreatmentPlan: async (treatmentPlanId, notes) => {
    try {
      const response = await axiosClient.post(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/complete`,
        null,
        {
          params: { notes },
        }
      );
      return {
        success: true,
        data: response.data,
        message: "Ho√†n th√†nh ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error completing treatment plan:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ ho√†n th√†nh ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // H·ªßy treatment plan
  cancelTreatmentPlan: async (treatmentPlanId, reason) => {
    try {
      const response = await axiosClient.post(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/cancel`,
        null,
        {
          params: { reason },
        }
      );
      return {
        success: true,
        data: response.data,
        message: "H·ªßy ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error canceling treatment plan:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ h·ªßy ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // ========== CLINICAL RESULTS ==========

  // L·∫•y k·∫øt qu·∫£ kh√°m theo ID
  getClinicalResultById: async (resultId) => {
    try {
      const response = await axiosClient.get(
        `/api/clinical-results/${resultId}`
      );
      return {
        success: true,
        data: response.data,
        message: "L·∫•y k·∫øt qu·∫£ kh√°m th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error fetching clinical result:", error);
      return {
        success: false,
        data: null,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£ kh√°m",
      };
    }
  },

  // C·∫≠p nh·∫≠t k·∫øt qu·∫£ kh√°m
  updateClinicalResult: async (resultId, clinicalResultRequest) => {
    try {
      const response = await axiosClient.put(
        `/api/clinical-results/${resultId}`,
        clinicalResultRequest
      );
      return {
        success: true,
        data: response.data,
        message: "C·∫≠p nh·∫≠t k·∫øt qu·∫£ kh√°m th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error updating clinical result:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t k·∫øt qu·∫£ kh√°m",
      };
    }
  },

  // L·∫•y k·∫øt qu·∫£ kh√°m theo b·ªánh nh√¢n
  getClinicalResultsByPatient: async (patientId) => {
    try {
      const response = await axiosClient.get(
        `/api/clinical-results/patient/${patientId}`
      );
      return {
        success: true,
        data: response.data,
        message: "L·∫•y danh s√°ch k·∫øt qu·∫£ kh√°m th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error fetching clinical results by patient:", error);
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ l·∫•y danh s√°ch k·∫øt qu·∫£ kh√°m",
      };
    }
  },

  // L·∫•y clinical results theo patient ID
  getPatientClinicalResults: async (patientId) => {
    try {
      console.log(
        `üìã [apiTreatmentManagement] L·∫•y clinical results cho patient ${patientId}...`
      );

      const userRole = apiTreatmentManagement.getCurrentUserRole();

      if (userRole === "DOCTOR") {
        // DOCTOR: S·ª≠ d·ª•ng API clinical-results/patient/{patientId}
        const response = await axiosClient.get(
          `/api/clinical-results/patient/${patientId}`
        );
        console.log(
          "‚úÖ [apiTreatmentManagement] Clinical results t·ª´ clinical-results API:",
          response.data
        );
        return {
          success: true,
          data: response.data,
          message: "L·∫•y k·∫øt qu·∫£ kh√°m l√¢m s√†ng th√†nh c√¥ng",
        };
      } else {
        // CUSTOMER/PATIENT: S·ª≠ d·ª•ng API treatment-workflow
        const response = await axiosClient.get(
          `/api/treatment-workflow/patient/${patientId}/clinical-results`
        );
        console.log(
          "‚úÖ [apiTreatmentManagement] Clinical results t·ª´ treatment-workflow API:",
          response.data
        );
        return {
          success: true,
          data: response.data,
          message: "L·∫•y k·∫øt qu·∫£ kh√°m l√¢m s√†ng th√†nh c√¥ng",
        };
      }
    } catch (error) {
      console.error(
        "‚ùå [apiTreatmentManagement] L·ªói l·∫•y clinical results:",
        error
      );
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£ kh√°m l√¢m s√†ng",
      };
    }
  },

  // L·∫•y treatment phases theo patient ID
  getPatientTreatmentPhases: async (patientId) => {
    try {
      console.log(
        `üìã [apiTreatmentManagement] L·∫•y treatment phases cho patient ${patientId}...`
      );

      const userRole = apiTreatmentManagement.getCurrentUserRole();

      if (userRole === "DOCTOR") {
        // DOCTOR: L·∫•y t·ª´ phases t·ªïng h·ª£p v√† l·ªçc theo patientId
        const user = localStorage.getItem("user");
        let doctorId = null;
        if (user) {
          const userData = JSON.parse(user);
          doctorId = userData.id || userData.userId;
        }

        const response = await axiosClient.get(
          `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
        );

        if (response.data && Array.isArray(response.data)) {
          // L·ªçc phases theo patientId
          const patientPhases = response.data.filter(
            (phase) =>
              phase.patientId === patientId || phase.patient?.id === patientId
          );

          console.log(
            "‚úÖ [apiTreatmentManagement] Treatment phases t·ª´ doctor API:",
            patientPhases
          );
          return {
            success: true,
            data: patientPhases,
            message: "L·∫•y phases ƒëi·ªÅu tr·ªã t·ª´ doctor API th√†nh c√¥ng",
          };
        }
      } else {
        // CUSTOMER/PATIENT: S·ª≠ d·ª•ng API ri√™ng
        const response = await axiosClient.get(
          `/api/treatment-workflow/patient/${patientId}/treatment-phases`
        );
        console.log(
          "‚úÖ [apiTreatmentManagement] Treatment phases t·ª´ patient API:",
          response.data
        );
        return {
          success: true,
          data: response.data,
          message: "L·∫•y phases ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
        };
      }

      return {
        success: false,
        data: [],
        message: "Kh√¥ng t√¨m th·∫•y phases ƒëi·ªÅu tr·ªã",
      };
    } catch (error) {
      console.error(
        "‚ùå [apiTreatmentManagement] L·ªói l·∫•y treatment phases:",
        error
      );
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y phases ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // L·∫•y treatment history theo patient ID
  getPatientTreatmentHistory: async (patientId) => {
    try {
      console.log(
        `üìã [apiTreatmentManagement] L·∫•y treatment history cho patient ${patientId}...`
      );

      const userRole = apiTreatmentManagement.getCurrentUserRole();

      if (userRole === "DOCTOR") {
        // DOCTOR: L·∫•y t·ª´ phases t·ªïng h·ª£p v√† l·ªçc theo patientId
        const user = localStorage.getItem("user");
        let doctorId = null;
        if (user) {
          const userData = JSON.parse(user);
          doctorId = userData.id || userData.userId;
        }

        const response = await axiosClient.get(
          `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
        );

        if (response.data && Array.isArray(response.data)) {
          // L·ªçc phases theo patientId
          const patientPhases = response.data.filter(
            (phase) =>
              phase.patientId === patientId || phase.patient?.id === patientId
          );

          // Chuy·ªÉn ƒë·ªïi phases th√†nh treatment history format
          const treatmentHistory = patientPhases.map((phase) => ({
            planId: phase.treatmentPlan?.planId || phase.planId,
            planName: phase.treatmentPlan?.planName || phase.planName,
            treatmentType:
              phase.treatmentPlan?.treatmentType || phase.treatmentType,
            startDate: phase.treatmentPlan?.startDate || phase.startDate,
            endDate: phase.treatmentPlan?.endDate || phase.endDate,
            status: phase.status || phase.treatmentPlan?.status,
            doctorId: phase.treatmentPlan?.doctorId || phase.doctorId,
            successProbability: phase.treatmentPlan?.successProbability,
            estimatedCost: phase.treatmentPlan?.estimatedCost,
            phaseName: phase.phaseName,
            phaseStatus: phase.status,
          }));

          console.log(
            "‚úÖ [apiTreatmentManagement] Treatment history t·ª´ doctor phases:",
            treatmentHistory
          );
          return {
            success: true,
            data: treatmentHistory,
            message: "L·∫•y l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã t·ª´ phases c·ªßa b√°c sƒ© th√†nh c√¥ng",
          };
        }
      } else {
        // CUSTOMER/PATIENT: S·ª≠ d·ª•ng API ri√™ng
        const historyEndpoint =
          apiTreatmentManagement.getRoleAppropriateEndpoint(
            patientId,
            "treatment-history"
          );

        if (historyEndpoint) {
          const response = await axiosClient.get(historyEndpoint);
          console.log(
            "‚úÖ [apiTreatmentManagement] Treatment history t·ª´ patient API:",
            response.data
          );
          return {
            success: true,
            data: response.data,
            message: "L·∫•y l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
          };
        }
      }

      return {
        success: false,
        data: [],
        message: "Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã",
      };
    } catch (error) {
      console.error(
        "‚ùå [apiTreatmentManagement] L·ªói l·∫•y treatment history:",
        error
      );
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // ========== TREATMENT PLAN QUERY ==========

  // L·∫•y t·∫•t c·∫£ treatment plans theo patient ID
  getTreatmentPlansByPatient: async (patientId) => {
    try {
      console.log(
        `üîç [apiTreatmentManagement] Fetching treatment plans for patient: ${patientId}`
      );

      const userRole = apiTreatmentManagement.getCurrentUserRole();

      if (userRole === "DOCTOR") {
        // DOCTOR: S·ª≠ d·ª•ng c√πng endpoint v·ªõi getActiveTreatmentPlan ƒë·ªÉ tr√°nh g·ªçi API tr√πng l·∫∑p
        const phasesEndpoint =
          apiTreatmentManagement.getRoleAppropriateEndpoint(
            patientId,
            "treatment-phases"
          );

        if (!phasesEndpoint) {
          return {
            success: false,
            data: [],
            message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
          };
        }

        const response = await axiosClient.get(phasesEndpoint);

        if (response.data && Array.isArray(response.data)) {
          // L·ªçc phases theo patientId
          const patientPhases = response.data.filter(
            (phase) =>
              phase.patientId === patientId || phase.patient?.id === patientId
          );

          console.log(
            "‚úÖ [apiTreatmentManagement] Found phases for patient:",
            patientPhases.length
          );
          return {
            success: true,
            data: patientPhases,
            message: "L·∫•y danh s√°ch phases ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
          };
        }
      } else {
        // CUSTOMER/PATIENT: S·ª≠ d·ª•ng treatment-history endpoint
        const historyEndpoint =
          apiTreatmentManagement.getRoleAppropriateEndpoint(
            patientId,
            "treatment-history"
          );

        if (!historyEndpoint) {
          return {
            success: false,
            data: [],
            message: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
          };
        }

        const response = await axiosClient.get(historyEndpoint);

        if (
          response.data &&
          Array.isArray(response.data) &&
          response.data.length > 0
        ) {
          const historyData = response.data[0]; // L·∫•y wrapper object
          return {
            success: true,
            data: historyData.history || [],
            message: "L·∫•y danh s√°ch ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
          };
        }
      }

      return {
        success: true,
        data: [],
        message: "Kh√¥ng c√≥ ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã n√†o",
      };
    } catch (error) {
      console.error("Error fetching treatment plans by patient:", error);
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // Test if treatment workflow endpoints exist
  testTreatmentWorkflowEndpoints: async () => {
    try {
      const user = localStorage.getItem("user");
      if (!user) return { success: false, message: "No user data" };

      const userData = JSON.parse(user);
      const doctorId = userData.id || userData.userId;

      if (!doctorId) return { success: false, message: "No doctor ID" };

      console.log(
        `üß™ [testTreatmentWorkflowEndpoints] Testing endpoints for doctor: ${doctorId}`
      );

      // Test c√°c endpoint kh√°c nhau ƒë·ªÉ xem c√°i n√†o ho·∫°t ƒë·ªông
      const testEndpoints = [
        `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`,
        `/api/treatment-plan-templates`,
        `/api/profiles/doctor/me`,
        `/api/treatment-workflow/treatment-plan`,
      ];

      const results = {};

      for (const endpoint of testEndpoints) {
        try {
          console.log(`üß™ Testing: ${endpoint}`);
          const response = await axiosClient.get(endpoint);
          results[endpoint] = {
            success: true,
            status: response.status,
            dataType: typeof response.data,
            dataSize: Array.isArray(response.data)
              ? response.data.length
              : "object",
          };
          console.log(`‚úÖ ${endpoint}: SUCCESS`);
        } catch (error) {
          results[endpoint] = {
            success: false,
            status: error.response?.status,
            message: error.response?.data?.message || error.message,
          };
          console.log(
            `‚ùå ${endpoint}: ${error.response?.status} - ${
              error.response?.data?.message || error.message
            }`
          );
        }
      }

      return { success: true, results };
    } catch (error) {
      console.error(`‚ùå [testTreatmentWorkflowEndpoints] Error:`, error);
      return { success: false, error: error.message };
    }
  },

  // Check if patient belongs to current doctor
  checkDoctorPatientAccess: async (patientId) => {
    try {
      const userRole = apiTreatmentManagement.getCurrentUserRole();
      console.log(`üîç [checkDoctorPatientAccess] User role: ${userRole}`);

      if (userRole !== "DOCTOR") {
        return { success: false, hasAccess: false, message: "Not a doctor" };
      }

      // Get doctor's phases and check if patient exists
      const user = localStorage.getItem("user");
      let doctorId = null;
      if (user) {
        const userData = JSON.parse(user);
        doctorId = userData.id || userData.userId;
        console.log(`üîç [checkDoctorPatientAccess] User data:`, {
          id: userData.id,
          userId: userData.userId,
          role: userData.role,
          finalDoctorId: doctorId,
        });
      }

      if (!doctorId) {
        console.error(
          `‚ùå [checkDoctorPatientAccess] No doctor ID found in user data`
        );
        return {
          success: false,
          hasAccess: false,
          message: "No doctor ID found",
        };
      }

      const endpoint = `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`;
      console.log(
        `üîç [checkDoctorPatientAccess] Calling endpoint: ${endpoint}`
      );

      // Let's also test if the token is working by calling a simple endpoint first
      try {
        console.log(
          `üîç [checkDoctorPatientAccess] Testing token with simpler endpoint first...`
        );

        // Test v·ªõi endpoint profile doctor tr∆∞·ªõc ƒë·ªÉ ki·ªÉm tra token
        const profileResponse = await axiosClient.get(
          "/api/profiles/doctor/me"
        );
        console.log(
          `‚úÖ [checkDoctorPatientAccess] Token works! Profile response:`,
          profileResponse.data
        );
      } catch (profileError) {
        console.error(
          `‚ùå [checkDoctorPatientAccess] Token test failed:`,
          profileError.response?.status
        );
        if (profileError.response?.status === 401) {
          return {
            success: false,
            hasAccess: false,
            message: "Token expired or invalid",
            errorStatus: 401,
          };
        }
      }

      const response = await axiosClient.get(endpoint);

      if (response.data && Array.isArray(response.data)) {
        const hasPatient = response.data.some(
          (phase) =>
            phase.patientId === patientId || phase.patient?.id === patientId
        );

        return {
          success: true,
          hasAccess: hasPatient,
          message: hasPatient
            ? "Patient found"
            : "Patient not found in doctor's list",
          totalPhases: response.data.length,
          patientPhases: response.data.filter(
            (p) => p.patientId === patientId || p.patient?.id === patientId
          ).length,
        };
      }

      return { success: false, hasAccess: false, message: "No response data" };
    } catch (error) {
      console.error("‚ùå [checkDoctorPatientAccess] Error:", error);
      console.error(
        "‚ùå [checkDoctorPatientAccess] Error response:",
        error.response?.data
      );
      console.error(
        "‚ùå [checkDoctorPatientAccess] Error status:",
        error.response?.status
      );

      return {
        success: false,
        hasAccess: false,
        message: error.response?.data?.message || "Access check failed",
        errorStatus: error.response?.status,
        error: error,
      };
    }
  },

  // L·∫•y active treatment plan c·ªßa patient (t·ªëi ∆∞u nh·∫•t)
  getActiveTreatmentPlan: async (patientId) => {
    try {
      console.log("üîç [apiTreatmentManagement] Getting active treatment plan for patient:", patientId);
      
      // S·ª≠ d·ª•ng endpoint tr·ª±c ti·∫øp t·ª´ backend
      const response = await axiosClient.get(
        `/api/treatment-workflow/patient/${patientId}/active-treatment-plan`
      );
      
      console.log("‚úÖ [apiTreatmentManagement] Active treatment plan response:", response.data);
      
      return {
        success: true,
        data: response.data,
        message: "L·∫•y ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå [apiTreatmentManagement] Error fetching active treatment plan:", error);

      // Handle 404 - No active treatment plan found
      if (error.response?.status === 404) {
        console.log("‚ÑπÔ∏è [apiTreatmentManagement] No active treatment plan found for patient:", patientId);
        
        // Th·ª≠ l·∫•y treatment plan m·ªõi nh·∫•t t·ª´ treatment history
        try {
          console.log("üîÑ [apiTreatmentManagement] Trying to get latest treatment plan from history...");
          const historyResponse = await axiosClient.get(
            `/api/treatment-workflow/patient/${patientId}/treatment-history`
          );
          
          if (historyResponse.data && historyResponse.data.length > 0) {
            // L·∫•y plan m·ªõi nh·∫•t
            const latestPlan = historyResponse.data[0];
            console.log("‚úÖ [apiTreatmentManagement] Found latest treatment plan from history:", latestPlan);
            
            return {
              success: true,
              data: latestPlan,
              message: "L·∫•y ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã m·ªõi nh·∫•t th√†nh c√¥ng",
              isLatest: true,
            };
          }
        } catch (historyError) {
          console.warn("‚ö†Ô∏è [apiTreatmentManagement] Could not get treatment history:", historyError);
        }
        
        return {
          success: false,
          data: null,
          message: "Kh√¥ng t√¨m th·∫•y ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã cho b·ªánh nh√¢n n√†y",
          notFound: true,
        };
      }

      // Handle permission errors gracefully
      if (error.response?.status === 403) {
        console.log(
          "‚ÑπÔ∏è [apiTreatmentManagement] Permission denied - user may not have required role"
        );
        return {
          success: false,
          data: null,
          message:
            "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã. Vui l√≤ng li√™n h·ªá b√°c sƒ©.",
          permissionDenied: true,
        };
      }

      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // L·∫•y treatment plans theo doctor ID
  getTreatmentPlansByDoctor: async (doctorId) => {
    try {
      // S·ª≠ d·ª•ng doctor treatment phases API thay v√¨ API ch∆∞a t·ªìn t·∫°i
      const response = await axiosClient.get(
        `/api/treatment-workflow/doctor/${doctorId}/treatment-phases`
      );

      // Transform phases data to treatment plans format
      const treatmentPlans = response.data || [];

      return {
        success: true,
        data: treatmentPlans,
        message: "L·∫•y danh s√°ch ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã c·ªßa b√°c sƒ© th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error fetching treatment plans by doctor:", error);
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã c·ªßa b√°c sƒ©",
      };
    }
  },

  // ========== UTILITY FUNCTIONS ==========

  // Transform template data from API to match frontend format
  transformTemplateData: (apiTemplate) => {
    if (!apiTemplate) return null;

    console.log(
      "üîç [apiTreatmentManagement] Transforming template data:",
      apiTemplate
    );

    // Ensure arrays are properly initialized
    const template = {
      id: apiTemplate.templateId,
      name: apiTemplate.name,
      type: apiTemplate.treatmentType,
      description: apiTemplate.description,
      planName: apiTemplate.planName,
      planDescription: apiTemplate.planDescription,
      estimatedDuration: apiTemplate.estimatedDurationDays,
      cost: apiTemplate.estimatedCost,
      successRate: apiTemplate.successProbability,
      riskFactors: apiTemplate.riskFactors,
      contraindications: Array.isArray(apiTemplate.contraindications)
        ? apiTemplate.contraindications
        : [],
      requirements: Array.isArray(apiTemplate.requirements)
        ? apiTemplate.requirements
        : [],
      treatmentCycle: apiTemplate.treatmentCycle,

      // Transform treatment steps
      phases: Array.isArray(apiTemplate.treatmentSteps)
        ? apiTemplate.treatmentSteps.map((step, index) => ({
            id: `phase_${index}`,
            name: step.name,
            duration: step.duration,
            description: step.description,
            activities: Array.isArray(step.activities)
              ? step.activities.map((activity, actIndex) => ({
                  id: `activity_${index}_${actIndex}`,
                  name: activity,
                  day: actIndex + 1,
                  type: "examination",
                  department: "Khoa S·∫£n",
                  room: "Ph√≤ng kh√°m 1",
                  status: "pending",
                }))
              : [],
            medications: [],
          }))
        : [],

      // Transform medication plan
      medications: Array.isArray(apiTemplate.medicationPlan)
        ? apiTemplate.medicationPlan.map((medPlan, index) => ({
            id: `med_${index}`,
            phase: medPlan.phase,
            medications: Array.isArray(medPlan.medications)
              ? medPlan.medications.map((med, medIndex) => ({
                  id: `medication_${index}_${medIndex}`,
                  name: med.name,
                  dosage: med.dosage,
                  frequency: med.frequency,
                  duration: med.duration,
                  instructions: `${med.dosage} - ${med.frequency} - ${med.duration}`,
                }))
              : [],
          }))
        : [],

      // Transform monitoring schedule
      monitoring: Array.isArray(apiTemplate.monitoringSchedule)
        ? apiTemplate.monitoringSchedule.map((monitor, index) => ({
            id: `monitor_${index}`,
            day: monitor.day,
            activity: monitor.activity,
            type: monitor.type,
          }))
        : [],

      // Metadata
      isActive: apiTemplate.isActive,
      createdAt: apiTemplate.createdAt,
      updatedAt: apiTemplate.updatedAt,
      createdBy: apiTemplate.createdBy,
      updatedBy: apiTemplate.updatedBy,
    };

    console.log("‚úÖ [apiTreatmentManagement] Transformed template:", template);
    return template;
  },

  // Transform treatment plan data for API submission
  transformTreatmentPlanForAPI: (frontendPlan, clinicalResultId) => {
    return {
      patientId: frontendPlan.patientId,
      treatmentType: frontendPlan.treatmentType,
      templateId: frontendPlan.templateId,
      planName: frontendPlan.planName || frontendPlan.templateName,
      planDescription: frontendPlan.planDescription,
      estimatedDurationDays: frontendPlan.estimatedDuration,
      estimatedCost: frontendPlan.estimatedCost,
      successProbability: frontendPlan.successRate,
      riskFactors: frontendPlan.riskFactors,
      contraindications: frontendPlan.contraindications,
      startDate: frontendPlan.estimatedStartDate,
      endDate: frontendPlan.estimatedEndDate,
      status: frontendPlan.status || "active",
      notes: frontendPlan.doctorNotes || frontendPlan.planNotes,

      // Transform treatment steps back to JSON
      treatmentSteps:
        frontendPlan.finalPlan?.phases?.map((phase) => ({
          step: phase.id,
          name: phase.name,
          duration: phase.duration,
          description: phase.description,
          activities: phase.activities?.map((activity) => activity.name) || [],
        })) || [],

      // Transform medication plan back to JSON
      medicationPlan:
        frontendPlan.finalPlan?.medications?.map((medPlan) => ({
          phase: medPlan.phase,
          medications:
            medPlan.medications?.map((med) => ({
              name: med.name,
              dosage: med.dosage,
              frequency: med.frequency,
              duration: med.duration,
            })) || [],
        })) || [],

      // Transform monitoring schedule back to JSON
      monitoringSchedule:
        frontendPlan.finalPlan?.monitoring?.map((monitor) => ({
          day: monitor.day,
          activity: monitor.activity,
          type: monitor.type,
        })) || [],
    };
  },

  // L·∫•y danh s√°ch phases c·ªßa treatment plan v·ªõi t√™n th·ª±c t·∫ø (backend ƒë√£ JOIN ƒë√∫ng)
  getTreatmentPlanPhases: async (treatmentPlanId) => {
    try {
      console.log(
        `üîç [apiTreatmentManagement] Getting phases for treatment plan: ${treatmentPlanId}`
      );

      const response = await axiosClient.get(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/phases`
      );
      console.log(
        "‚úÖ [apiTreatmentManagement] Treatment plan phases response:",
        response.data
      );

      return {
        success: true,
        data: response.data,
        message: "L·∫•y danh s√°ch phases th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error getting treatment plan phases:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch phases",
      };
    }
  },

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i phase
  updatePhaseStatus: async (treatmentPlanId, phaseId, statusData) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Updating phase status: ${treatmentPlanId}/${phaseId}`
      );

      const response = await axiosClient.put(
        `/api/treatment-workflow/treatment-plan/${treatmentPlanId}/phase/${phaseId}/status`,
        statusData
      );

      console.log(
        "‚úÖ [apiTreatmentManagement] Phase status updated:",
        response.data
      );

      return {
        success: true,
        data: response.data,
        message: "C·∫≠p nh·∫≠t tr·∫°ng th√°i phase th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error updating phase status:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i phase",
      };
    }
  },

  // ========== TREATMENT PHASE CRUD OPERATIONS ==========

  // T·∫°o treatment phase m·ªõi
  createTreatmentPhase: async (phaseData) => {
    try {
      console.log(
        "üîÑ [apiTreatmentManagement] Creating treatment phase:",
        phaseData
      );

      // Since we don't have a direct API endpoint for creating phases,
      // we'll simulate this functionality for now
      // In a real implementation, this would make an actual API call

      const response = {
        data: {
          id: `phase_${Date.now()}`,
          phaseId: `phase_${Date.now()}`,
          ...phaseData,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        },
      };

      console.log(
        "‚úÖ [apiTreatmentManagement] Treatment phase created:",
        response.data
      );

      return {
        success: true,
        data: response.data,
        message: "T·∫°o giai ƒëo·∫°n ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error creating treatment phase:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o giai ƒëo·∫°n ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // C·∫≠p nh·∫≠t treatment phase
  updateTreatmentPhase: async (phaseId, updateData) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Updating treatment phase: ${phaseId}`,
        updateData
      );

      // Since we don't have a direct API endpoint for updating phases,
      // we'll simulate this functionality for now
      // In a real implementation, this would make an actual API call

      const response = {
        data: {
          id: phaseId,
          phaseId: phaseId,
          ...updateData,
          updatedAt: new Date().toISOString(),
        },
      };

      console.log(
        "‚úÖ [apiTreatmentManagement] Treatment phase updated:",
        response.data
      );

      return {
        success: true,
        data: response.data,
        message: "C·∫≠p nh·∫≠t giai ƒëo·∫°n ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error updating treatment phase:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giai ƒëo·∫°n ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // X√≥a treatment phase
  deleteTreatmentPhase: async (phaseId) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Deleting treatment phase: ${phaseId}`
      );

      // Since we don't have a direct API endpoint for deleting phases,
      // we'll simulate this functionality for now
      // In a real implementation, this would make an actual API call

      console.log("‚úÖ [apiTreatmentManagement] Treatment phase deleted");

      return {
        success: true,
        data: { id: phaseId, deleted: true },
        message: "X√≥a giai ƒëo·∫°n ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error deleting treatment phase:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ x√≥a giai ƒëo·∫°n ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // L·∫•y chi ti·∫øt treatment phase
  getTreatmentPhaseById: async (phaseId) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Getting treatment phase: ${phaseId}`
      );

      // Since we don't have a direct API endpoint for getting phase by ID,
      // we'll simulate this functionality for now
      // In a real implementation, this would make an actual API call

      const response = {
        data: {
          id: phaseId,
          phaseId: phaseId,
          phaseName: "Giai ƒëo·∫°n m·∫´u",
          description: "M√¥ t·∫£ giai ƒëo·∫°n m·∫´u",
          status: "Pending",
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        },
      };

      console.log(
        "‚úÖ [apiTreatmentManagement] Treatment phase retrieved:",
        response.data
      );

      return {
        success: true,
        data: response.data,
        message: "L·∫•y th√¥ng tin giai ƒëo·∫°n ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error getting treatment phase:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message ||
          "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin giai ƒëo·∫°n ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // ========== TREATMENT SCHEDULE MANAGEMENT ==========

  // L∆∞u l·ªãch ƒëi·ªÅu tr·ªã
  saveTreatmentSchedule: async (scheduleData) => {
    try {
      console.log(
        "üîÑ [apiTreatmentManagement] Saving treatment schedule:",
        scheduleData
      );

      // Since we don't have a direct API endpoint for saving schedules,
      // we'll simulate this functionality for now
      // In a real implementation, this would make an actual API call

      const response = {
        data: {
          id: `schedule_${Date.now()}`,
          scheduleId: `schedule_${Date.now()}`,
          ...scheduleData,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        },
      };

      console.log(
        "‚úÖ [apiTreatmentManagement] Treatment schedule saved:",
        response.data
      );

      return {
        success: true,
        data: response.data,
        message: "L∆∞u l·ªãch ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error saving treatment schedule:", error);
      return {
        success: false,
        data: null,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ l∆∞u l·ªãch ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // üÜï L·∫•y l·ªãch h·∫πn treatment schedule theo patient ID
  getTreatmentScheduleByPatient: async (patientId) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Getting treatment schedules for patient: ${patientId}`
      );

      const response = await axiosClient.get(`/api/treatment-schedule/patient/${patientId}`);
      
      console.log(
        "‚úÖ [apiTreatmentManagement] Treatment schedules retrieved:",
        response.data
      );

      return {
        success: true,
        data: response.data.data, // L·∫•y data t·ª´ GenericResponse
        message: response.data.message || "L·∫•y danh s√°ch l·ªãch h·∫πn th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error getting treatment schedules:", error);
      return {
        success: false,
        data: [],
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch l·ªãch h·∫πn",
      };
    }
  },

  // üÜï C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn (ch·ªâ b√°c sƒ©)
  updateScheduleStatus: async (scheduleId, statusData) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Updating schedule status: ${scheduleId} to ${statusData.status}`
      );

      const response = await axiosClient.put(`/api/treatment-schedule/${scheduleId}/status`, statusData);
      
      console.log(
        "‚úÖ [apiTreatmentManagement] Schedule status updated:",
        response.data
      );

      return {
        success: true,
        data: response.data.data, // L·∫•y data t·ª´ GenericResponse
        message: response.data.message || "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error updating schedule status:", error);
      return {
        success: false,
        data: null,
        message: error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i",
      };
    }
  },

  // C·∫≠p nh·∫≠t l·ªãch ƒëi·ªÅu tr·ªã
  updateTreatmentSchedule: async (scheduleId, updateData) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Updating treatment schedule: ${scheduleId}`,
        updateData
      );

      // Since we don't have a direct API endpoint for updating schedules,
      // we'll simulate this functionality for now
      // In a real implementation, this would make an actual API call

      const response = {
        data: {
          id: scheduleId,
          scheduleId: scheduleId,
          ...updateData,
          updatedAt: new Date().toISOString(),
        },
      };

      console.log(
        "‚úÖ [apiTreatmentManagement] Treatment schedule updated:",
        response.data
      );

      return {
        success: true,
        data: response.data,
        message: "C·∫≠p nh·∫≠t l·ªãch ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error updating treatment schedule:", error);
      return {
        success: false,
        data: null,
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // ========== PHASE ACTIVITIES MANAGEMENT ==========

  // L·∫•y chi ti·∫øt ho·∫°t ƒë·ªông c·ªßa m·ªôt phase
  getPhaseActivities: async (phaseId, treatmentPlanId) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Getting activities for phase: ${phaseId}, planId: ${treatmentPlanId}`
      );

      // TODO: Replace with actual API call
      const mockActivities = [];

      console.log(
        `‚úÖ [apiTreatmentManagement] Mock activities for phase ${phaseId}:`,
        mockActivities
      );

      return {
        success: true,
        data: mockActivities,
        message: "L·∫•y danh s√°ch ho·∫°t ƒë·ªông th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error getting phase activities:", error);
      return {
        success: false,
        data: [],
        message:
          error.response?.data?.message || "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ho·∫°t ƒë·ªông",
      };
    }
  },

  // ========== ENHANCED UTILITY FUNCTIONS ==========

  // Validate treatment phase data
  validateTreatmentPhase: (phaseData) => {
    const errors = [];

    if (!phaseData.phaseName) {
      errors.push("Thi·∫øu t√™n giai ƒëo·∫°n");
    }

    if (!phaseData.description) {
      errors.push("Thi·∫øu m√¥ t·∫£ giai ƒëo·∫°n");
    }

    if (!phaseData.planId && !phaseData.patientId) {
      errors.push("Thi·∫øu th√¥ng tin li√™n k·∫øt (planId ho·∫∑c patientId)");
    }

    if (!phaseData.order || phaseData.order < 1) {
      errors.push("Th·ª© t·ª± giai ƒëo·∫°n kh√¥ng h·ª£p l·ªá");
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  },

  // Validate treatment schedule data
  validateTreatmentSchedule: (scheduleData) => {
    const errors = [];

    if (!scheduleData.patientId) {
      errors.push("Thi·∫øu th√¥ng tin b·ªánh nh√¢n");
    }

    if (
      !scheduleData.sessions ||
      !Array.isArray(scheduleData.sessions) ||
      scheduleData.sessions.length === 0
    ) {
      errors.push("L·ªãch ƒëi·ªÅu tr·ªã ph·∫£i c√≥ √≠t nh·∫•t m·ªôt bu·ªïi ƒëi·ªÅu tr·ªã");
    }

    if (!scheduleData.startDate) {
      errors.push("Thi·∫øu ng√†y b·∫Øt ƒë·∫ßu ƒëi·ªÅu tr·ªã");
    }

    if (scheduleData.sessions) {
      scheduleData.sessions.forEach((session, index) => {
        if (!session.activity) {
          errors.push(`Bu·ªïi ƒëi·ªÅu tr·ªã ${index + 1}: Thi·∫øu t√™n ho·∫°t ƒë·ªông`);
        }
        if (!session.date) {
          errors.push(`Bu·ªïi ƒëi·ªÅu tr·ªã ${index + 1}: Thi·∫øu ng√†y th·ª±c hi·ªán`);
        }
        if (!session.duration || session.duration < 5) {
          errors.push(`Bu·ªïi ƒëi·ªÅu tr·ªã ${index + 1}: Th·ªùi gian kh√¥ng h·ª£p l·ªá`);
        }
      });
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  },

  // Format phase data for API submission
  formatPhaseDataForAPI: (phaseData) => {
    return {
      planId: phaseData.planId,
      patientId: phaseData.patientId,
      phaseName: phaseData.phaseName?.trim(),
      description: phaseData.description?.trim(),
      order: parseInt(phaseData.order),
      estimatedDuration: phaseData.estimatedDuration?.trim(),
      status: phaseData.status || "Pending",
      startDate: phaseData.startDate,
      endDate: phaseData.endDate,
      createdBy: phaseData.createdBy,
      updatedBy: phaseData.updatedBy,
      createdAt: phaseData.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };
  },

  // Format schedule data for API submission
  formatScheduleDataForAPI: (scheduleData) => {
    return {
      patientId: scheduleData.patientId,
      treatmentPlanId: scheduleData.treatmentPlanId,
      templateId: scheduleData.templateId,
      startDate: scheduleData.startDate,
      preferredTime: scheduleData.preferredTime,
      status: scheduleData.status || "active",
      totalSessions: scheduleData.sessions?.length || 0,
      estimatedDuration: scheduleData.estimatedDuration,
      doctorNotes: scheduleData.doctorNotes?.trim(),
      createdBy: scheduleData.createdBy,
      updatedBy: scheduleData.updatedBy,
      sessions:
        scheduleData.sessions?.map((session) => ({
          id: session.id,
          phaseId: session.phaseId,
          phaseName: session.phaseName,
          activity: session.activity?.trim(),
          date: session.date,
          duration: parseInt(session.duration),
          type: session.type,
          room: session.room?.trim(),
          required: Boolean(session.required),
          completed: Boolean(session.completed),
          order: parseInt(session.order),
          custom: Boolean(session.custom),
          modified: Boolean(session.modified),
        })) || [],
      customSessions: scheduleData.customSessions || [],
      adjustments: scheduleData.adjustments || {},
      createdAt: scheduleData.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };
  },

  // ========== MISSING API METHODS - PHASE STATUS MANAGEMENT ==========

  // Ki·ªÉm tra quy·ªÅn truy c·∫≠p c·ªßa b√°c sƒ© ƒë·ªëi v·ªõi b·ªánh nh√¢n
  checkDoctorPatientAccess: async (doctorId, patientId) => {
    try {
      console.log(
        `üîç [apiTreatmentManagement] Checking doctor-patient access: ${doctorId} -> ${patientId}`
      );

      // For now, we'll simulate the access check
      // In a real implementation, this would check the database
      const hasAccess = true; // Assume access is granted for now

      return {
        success: hasAccess,
        data: { hasAccess },
        message: hasAccess
          ? "Quy·ªÅn truy c·∫≠p ƒë∆∞·ª£c c·∫•p"
          : "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
      };
    } catch (error) {
      console.error("‚ùå Error checking doctor-patient access:", error);
      return {
        success: false,
        data: null,
        message: "L·ªói khi ki·ªÉm tra quy·ªÅn truy c·∫≠p",
      };
    }
  },

  // L·∫•y danh s√°ch activities c·ªßa m·ªôt phase
  getPhaseActivities: async (phaseId) => {
    try {
      console.log(
        `üîç [apiTreatmentManagement] Getting activities for phase: ${phaseId}`
      );

      // TODO: Replace with actual API call
      const mockActivities = [];

      return {
        success: true,
        data: mockActivities,
        message: "L·∫•y danh s√°ch ho·∫°t ƒë·ªông th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error getting phase activities:", error);
      return {
        success: false,
        data: [],
        message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch ho·∫°t ƒë·ªông",
      };
    }
  },

  // L∆∞u l·ªãch ƒëi·ªÅu tr·ªã
  saveTreatmentSchedule: async (scheduleData) => {
    try {
      console.log(
        "üîÑ [apiTreatmentManagement] Saving treatment schedule:",
        scheduleData
      );

      // Mock API call - in real implementation, this would save to backend
      const response = {
        data: {
          id: `schedule_${Date.now()}`,
          ...scheduleData,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        },
      };

      return {
        success: true,
        data: response.data,
        message: "L∆∞u l·ªãch ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error saving treatment schedule:", error);
      return {
        success: false,
        data: null,
        message: "Kh√¥ng th·ªÉ l∆∞u l·ªãch ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // C·∫≠p nh·∫≠t l·ªãch ƒëi·ªÅu tr·ªã
  updateTreatmentSchedule: async (scheduleId, updateData) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Updating treatment schedule: ${scheduleId}`,
        updateData
      );

      // Mock API call - in real implementation, this would update in backend
      const response = {
        data: {
          id: scheduleId,
          ...updateData,
          updatedAt: new Date().toISOString(),
        },
      };

      return {
        success: true,
        data: response.data,
        message: "C·∫≠p nh·∫≠t l·ªãch ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error updating treatment schedule:", error);
      return {
        success: false,
        data: null,
        message: "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t l·ªãch ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // L·∫•y k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã theo b·ªánh nh√¢n
  getTreatmentPlansByPatient: async (patientId) => {
    try {
      console.log(
        `üîç [apiTreatmentManagement] Getting treatment plans for patient: ${patientId}`
      );

      // Try to get from real API first
      try {
        const response = await axiosClient.get(
          `/api/treatment-workflow/patient/${patientId}/treatment-plans`
        );

        return {
          success: true,
          data: response.data,
          message: "L·∫•y danh s√°ch k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
        };
      } catch (apiError) {
        console.warn("‚ö†Ô∏è API call failed, using mock data:", apiError);

        // TODO: Handle empty treatment plans
        const mockPlans = [];

        return {
          success: true,
          data: mockPlans,
          message: "L·∫•y danh s√°ch k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã th√†nh c√¥ng (mock)",
        };
      }
    } catch (error) {
      console.error("‚ùå Error getting treatment plans:", error);
      return {
        success: false,
        data: [],
        message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch k·∫ø ho·∫°ch ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // X√≥a giai ƒëo·∫°n ƒëi·ªÅu tr·ªã
  deleteTreatmentPhase: async (phaseId) => {
    try {
      console.log(
        `üîÑ [apiTreatmentManagement] Deleting treatment phase: ${phaseId}`
      );

      // Mock API call - in real implementation, this would delete from backend
      return {
        success: true,
        data: { deletedId: phaseId },
        message: "X√≥a giai ƒëo·∫°n ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error deleting treatment phase:", error);
      return {
        success: false,
        data: null,
        message: "Kh√¥ng th·ªÉ x√≥a giai ƒëo·∫°n ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // ========== ENHANCED PHASE STATUS TRACKING ==========

  // L·∫•y l·ªãch s·ª≠ thay ƒë·ªïi tr·∫°ng th√°i c·ªßa phase
  getPhaseStatusHistory: async (phaseId) => {
    try {
      console.log(
        `üîç [apiTreatmentManagement] Getting phase status history: ${phaseId}`
      );

      // Mock status history
      const mockHistory = [
        {
          id: `history_${phaseId}_1`,
          phaseId: phaseId,
          status: "Pending",
          notes: "Giai ƒëo·∫°n ƒë∆∞·ª£c t·∫°o",
          updatedBy: "Dr. Nguyen",
          updatedAt: new Date(Date.now() - 86400000).toISOString(), // 1 day ago
        },
        {
          id: `history_${phaseId}_2`,
          phaseId: phaseId,
          status: "In Progress",
          notes: "B·∫Øt ƒë·∫ßu th·ª±c hi·ªán giai ƒëo·∫°n",
          updatedBy: "Dr. Nguyen",
          updatedAt: new Date().toISOString(),
        },
      ];

      return {
        success: true,
        data: mockHistory,
        message: "L·∫•y l·ªãch s·ª≠ tr·∫°ng th√°i th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("‚ùå Error getting phase status history:", error);
      return {
        success: false,
        data: [],
        message: "Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ tr·∫°ng th√°i",
      };
    }
  },

  // L·∫•y th·ªëng k√™ ti·∫øn ƒë·ªô ƒëi·ªÅu tr·ªã
  getTreatmentProgress: async (treatmentPlanId) => {
    try {
      console.log(
        `üîç [apiTreatmentManagement] Getting treatment progress: ${treatmentPlanId}`
      );

      // Get phases first
      const phasesResult = await apiTreatmentManagement.getTreatmentPlanPhases(
        treatmentPlanId
      );

      if (phasesResult.success && phasesResult.data) {
        const phases = phasesResult.data;
        const totalPhases = phases.length;
        const completedPhases = phases.filter(
          (p) => p.status === "Completed"
        ).length;
        const inProgressPhases = phases.filter(
          (p) => p.status === "In Progress"
        ).length;
        const pendingPhases = phases.filter(
          (p) => p.status === "Pending"
        ).length;

        const progress = {
          totalPhases,
          completedPhases,
          inProgressPhases,
          pendingPhases,
          completionPercentage:
            totalPhases > 0
              ? Math.round((completedPhases / totalPhases) * 100)
              : 0,
          currentPhase:
            phases.find((p) => p.status === "In Progress")?.phaseName ||
            "Ch∆∞a b·∫Øt ƒë·∫ßu",
          estimatedCompletion: null, // Calculate based on phase durations
          lastUpdated: new Date().toISOString(),
        };

        return {
          success: true,
          data: progress,
          message: "L·∫•y ti·∫øn ƒë·ªô ƒëi·ªÅu tr·ªã th√†nh c√¥ng",
        };
      }

      return {
        success: false,
        data: null,
        message: "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin phases",
      };
    } catch (error) {
      console.error("‚ùå Error getting treatment progress:", error);
      return {
        success: false,
        data: null,
        message: "Kh√¥ng th·ªÉ l·∫•y ti·∫øn ƒë·ªô ƒëi·ªÅu tr·ªã",
      };
    }
  },

  // L·∫•y ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã hi·ªán t·∫°i (active) c·ªßa b·ªánh nh√¢n
  getActiveTreatmentPlan: async (patientId) => {
    try {
      const response = await axiosClient.get(
        `/api/treatment-workflow/patient/${patientId}/active-treatment-plan`
      );
      return {
        success: true,
        data: response.data,
        message: "L·∫•y ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã hi·ªán t·∫°i th√†nh c√¥ng",
      };
    } catch (error) {
      console.error("Error fetching active treatment plan:", error);
      return {
        success: false,
        error: error.message,
        message: "C√≥ l·ªói x·∫£y ra khi l·∫•y ph√°c ƒë·ªì ƒëi·ªÅu tr·ªã hi·ªán t·∫°i",
      };
    }
  },
};

export default apiTreatmentManagement;
