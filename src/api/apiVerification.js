import axiosClient from "../services/axiosClient";

const apiVerification = {
  // X√°c th·ª±c email b·∫±ng token - improved v·ªõi backend response format ƒë√∫ng
  verifyEmail: async (token) => {
    console.log(
      "üîç [apiVerification] B·∫Øt ƒë·∫ßu x√°c th·ª±c email v·ªõi token:",
      token
    );

    // ‚úÖ Backend confirmed working: GET /api/notifications/verify-email?token=...
    // Expected response: { "message": "Email x√°c th·ª±c th√†nh c√¥ng!", "success": true }
    try {
      console.log(
        "üîç [apiVerification] Calling backend endpoint (confirmed working)..."
      );
      const response = await axiosClient.get(
        `/api/notifications/verify-email?token=${token}`
      );

      console.log("‚úÖ [apiVerification] Raw response:", response);
      console.log("‚úÖ [apiVerification] Response data:", response.data);
      console.log("‚úÖ [apiVerification] Response status:", response.status);
      console.log(
        "üîç [apiVerification] Data details:",
        JSON.stringify(response.data, null, 2)
      );

      // ‚úÖ Check for success in response data
      if (response.data && response.data.success === true) {
        console.log(
          "üéâ [apiVerification] Email verification SUCCESS confirmed!"
        );
        return response;
      }
      console.log(
        "üîç [apiVerification] Success field check:",
        response.data?.success
      );

      // ‚úÖ Check for success message
      if (
        response.data &&
        response.data.message &&
        response.data.message.includes("th√†nh c√¥ng")
      ) {
        console.log(
          "üéâ [apiVerification] Email verification SUCCESS by message!"
        );
        return response;
      }
      console.log(
        "üîç [apiVerification] Message check:",
        response.data?.message
      );

      // ‚úÖ If we get here, response was 200 but no clear success indicators
      console.warn(
        "‚ö†Ô∏è [apiVerification] 200 response but no clear success indicators"
      );
      console.warn("üìÑ Response data:", response.data);

      // Don't consider it success if no clear indicators
      const shouldReject = true;
      if (shouldReject) {
        const ambiguousError = new Error("Response kh√¥ng r√µ r√†ng v·ªÅ success");
        ambiguousError.response = {
          status: 200,
          data: response.data,
        };
        throw ambiguousError;
      }
    } catch (error) {
      console.error("‚ùå [apiVerification] Primary endpoint failed:", error);

      // ‚úÖ Detailed error logging
      if (error.response) {
        console.log("üìÑ Error response status:", error.response.status);
        console.log("üìÑ Error response data:", error.response.data);
        console.log("üìÑ Error response headers:", error.response.headers);

        const { status, data } = error.response;

        // ‚úÖ Handle "already verified" cases as SUCCESS
        if (status === 400 && data) {
          console.log(
            "üîç [apiVerification] 400 error data:",
            JSON.stringify(data, null, 2)
          );

          // Check for success indicators in error response
          const errorMessage =
            typeof data === "string" ? data : data.message || "";

          if (
            errorMessage.includes("th√†nh c√¥ng") ||
            errorMessage.includes("ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c") ||
            errorMessage.includes("already verified") ||
            errorMessage.includes("ƒë√£ k√≠ch ho·∫°t") ||
            errorMessage.includes("already used") ||
            errorMessage.includes("ƒë√£ s·ª≠ d·ª•ng")
          ) {
            console.log("‚úÖ [apiVerification] Token already used = SUCCESS!");
            return {
              data: {
                message: errorMessage || "Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥",
                success: true,
                alreadyVerified: true,
              },
            };
          }
        }

        // ‚úÖ 410 Gone = Token already used = SUCCESS
        if (status === 410) {
          console.log(
            "‚úÖ [apiVerification] 410 Gone - token already used = SUCCESS!"
          );
          return {
            data: {
              message: "Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c tr∆∞·ªõc ƒë√≥",
              success: true,
              alreadyVerified: true,
            },
          };
        }
      } else if (error.request) {
        console.error("‚ùå [apiVerification] Network error:", error.request);
      } else {
        console.error("‚ùå [apiVerification] Unknown error:", error.message);
      }

      // ‚úÖ Re-throw v·ªõi detailed info
      throw error;
    }

    // ‚úÖ If we get here, something unexpected happened
    console.warn("‚ö†Ô∏è [apiVerification] Unexpected response format");
    const unexpectedError = new Error("Unexpected response format from server");
    unexpectedError.response = {
      status: 500,
      data: {
        message: "Server tr·∫£ v·ªÅ format kh√¥ng mong ƒë·ª£i. Vui l√≤ng th·ª≠ l·∫°i.",
        suggestTestLogin: true,
      },
    };
    throw unexpectedError;
  },

  // ‚úÖ NEW: Test direct endpoint call v·ªõi debugging
  testDirectVerification: async (token) => {
    try {
      console.log("üß™ [apiVerification] Testing direct API call...");

      // Make direct call v·ªõi full URL ƒë·ªÉ test
      const fullUrl = `${axiosClient.defaults.baseURL}/api/notifications/verify-email?token=${token}`;
      console.log("üîó Full URL:", fullUrl);

      const response = await axiosClient.get(
        `/api/notifications/verify-email?token=${token}`,
        {
          timeout: 10000,
          headers: {
            Accept: "application/json",
            "Content-Type": "application/json",
          },
        }
      );

      console.log(
        "‚úÖ [apiVerification] Direct test successful:",
        response.data
      );
      return response;
    } catch (error) {
      console.error("‚ùå [apiVerification] Direct test failed:", error);
      throw error;
    }
  },

  // ‚úÖ NEW: Test user verification status indirectly
  checkUserVerificationStatus: async (email) => {
    try {
      console.log(
        "üîç [apiVerification] Checking user verification status for:",
        email
      );

      // Try to get user info (this usually fails if not verified)
      const response = await axiosClient.get(
        `/api/users/status?email=${email}`
      );
      console.log("‚úÖ [apiVerification] User status:", response.data);

      return {
        isVerified: response.data.verified || response.data.status === "ACTIVE",
        status: response.data.status,
        message: response.data.message,
      };
    } catch (error) {
      if (error.response?.status === 403) {
        // 403 c√≥ th·ªÉ means user ch∆∞a verified
        return {
          isVerified: false,
          status: "UNVERIFIED",
          message: "Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c",
        };
      }

      console.log(
        "‚ùå [apiVerification] Cannot check user status:",
        error.response?.status
      );
      return null;
    }
  },

  // ‚úÖ NEW: Smart verification v·ªõi fallback
  smartVerifyEmail: async (token, userEmail = null) => {
    try {
      // Try normal verification first
      console.log("üß† [apiVerification] Starting smart verification...");
      return await apiVerification.verifyEmail(token);
    } catch (error) {
      console.log(
        "üîÑ [apiVerification] Normal verification failed, trying fallback methods..."
      );

      // Try direct test
      try {
        console.log("üß™ [apiVerification] Trying direct verification test...");
        return await apiVerification.testDirectVerification(token);
      } catch (directError) {
        console.log("‚ùå [apiVerification] Direct test also failed");
      }

      // If we have user email, try to check status indirectly
      if (userEmail) {
        const status = await apiVerification.checkUserVerificationStatus(
          userEmail
        );
        if (status && status.isVerified) {
          console.log(
            "‚úÖ [apiVerification] User is verified via status check!"
          );
          return {
            data: {
              message: "Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c (confirmed via user status)",
              verified: true,
              method: "status_check",
            },
          };
        }
      }

      // If all fails, throw original error with suggestion
      console.log(
        "üîç [apiVerification] All methods failed, suggesting test login..."
      );
      const finalError = new Error("Smart verification kh√¥ng th·ªÉ x√°c nh·∫≠n");
      finalError.response = {
        status: 400,
        data: {
          message:
            "Kh√¥ng th·ªÉ x√°c nh·∫≠n verification qua API. Backend ho·∫°t ƒë·ªông ƒë√∫ng trong Swagger nh∆∞ng c√≥ th·ªÉ c√≥ CORS ho·∫∑c network issues. H√£y th·ª≠ ƒëƒÉng nh·∫≠p ƒë·ªÉ ki·ªÉm tra.",
          suggestTestLogin: true,
          debugInfo: {
            backendWorking: true,
            swaggerTest: "SUCCESS",
            frontendIssue: "CORS/Network",
            recommendation: "Test login to confirm",
          },
        },
      };
      throw finalError;
    }
  },

  // Test connection ƒë·∫øn backend
  testConnection: async () => {
    try {
      console.log("üîç [apiVerification] Test connection ƒë·∫øn backend...");
      const response = await axiosClient.get("/api/services"); // endpoint public
      console.log(
        "‚úÖ [apiVerification] Backend connection OK:",
        response.status
      );
      return true;
    } catch (error) {
      console.error("‚ùå [apiVerification] Backend connection failed:", error);
      return false;
    }
  },

  // Test login ƒë·ªÉ verify indirectly
  testLoginCapability: async (email) => {
    try {
      console.log("üîç [apiVerification] Test xem c√≥ th·ªÉ login kh√¥ng...");

      // G·ªçi API check user status (kh√¥ng c·∫ßn password)
      const response = await axiosClient.get(
        `/api/users/check-status?email=${email}`
      );
      console.log("‚úÖ [apiVerification] User status:", response.data);
      return response.data;
    } catch (error) {
      console.log(
        "‚ùå [apiVerification] Cannot check user status:",
        error.response?.status
      );
      return null;
    }
  },

  // G·ª≠i l·∫°i email x√°c th·ª±c
  resendVerificationEmail: async (email) => {
    try {
      console.log("üìß [apiVerification] G·ª≠i l·∫°i email x√°c th·ª±c cho:", email);
      const response = await axiosClient.post(
        "/api/notifications/resend-verification",
        { email }
      );
      console.log(
        "‚úÖ [apiVerification] G·ª≠i l·∫°i email th√†nh c√¥ng:",
        response.data
      );
      return response;
    } catch (error) {
      console.error(
        "‚ùå [apiVerification] L·ªói g·ª≠i l·∫°i email:",
        error.response?.data || error.message
      );
      throw error;
    }
  },
};

export default apiVerification;
