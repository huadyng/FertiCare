import React, { useState, useEffect, useContext } from "react";
import {
  Card,
  Button,
  Row,
  Col,
  Typography,
  Space,
  Badge,
  Tag,
  List,
  Avatar,
  Descriptions,
  Alert,
  message,
  Statistic,
  Tooltip,
  Spin,
  Empty,
  Modal,
  Tabs,
  Table,
  Progress,
  Timeline,
  Divider,
} from "antd";
import {
  UserOutlined,
  FileTextOutlined,
  CalendarOutlined,
  CheckCircleOutlined,
  ClockCircleOutlined,
  ExclamationCircleOutlined,
  DownloadOutlined,
  EyeOutlined,
  ReloadOutlined,
  MedicineBoxOutlined,
  HeartOutlined,
  ExperimentOutlined,
  HistoryOutlined,
} from "@ant-design/icons";
import { UserContext } from "../../../context/UserContext";
import apiTreatmentManagement from "../../../api/apiTreatmentManagement";
import "./PatientPages.css";

const { Title, Text, Paragraph } = Typography;
const { TabPane } = Tabs;

const MedicalRecords = () => {
  const { user } = useContext(UserContext);
  const [loading, setLoading] = useState(true);
  const [clinicalResults, setClinicalResults] = useState([]);
  const [treatmentHistory, setTreatmentHistory] = useState([]);
  const [error, setError] = useState(null);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);

  useEffect(() => {
    if (user?.id) {
      loadMedicalRecords();
    }
  }, [user]);

  const loadMedicalRecords = async () => {
    try {
      setLoading(true);
      setError(null);

      console.log(
        "üè• [PatientMedicalRecords] Loading medical records for patient:",
        user.id
      );

      // Load all medical data in parallel
      const [clinicalResponse, historyResponse] = await Promise.allSettled([
        apiTreatmentManagement.getPatientClinicalResults(user.id),
        apiTreatmentManagement.getPatientTreatmentHistory(user.id),
      ]);

      // Process clinical results
      const clinicalData =
        clinicalResponse.status === "fulfilled" &&
        clinicalResponse.value?.success
          ? clinicalResponse.value.data || []
          : [];

      // Process treatment history
      const historyData =
        historyResponse.status === "fulfilled" && historyResponse.value?.success
          ? historyResponse.value.data || []
          : [];

      setClinicalResults(clinicalData);
      setTreatmentHistory(historyData);

      console.log("‚úÖ [PatientMedicalRecords] Medical records loaded:", {
        clinicalResults: clinicalData.length,
        treatmentHistory: historyData.length,
      });
    } catch (error) {
      console.error(
        "‚ùå [PatientMedicalRecords] Error loading medical records:",
        error
      );
      setError("Kh√¥ng th·ªÉ t·∫£i h·ªì s∆° y t·∫ø. Vui l√≤ng th·ª≠ l·∫°i sau.");
    } finally {
      setLoading(false);
    }
  };

  const refreshData = async () => {
    setRefreshing(true);
    await loadMedicalRecords();
    setRefreshing(false);
    message.success("ƒê√£ c·∫≠p nh·∫≠t h·ªì s∆° y t·∫ø");
  };

  const formatDate = (dateString) => {
    if (!dateString) return "Ch∆∞a c√≥ th√¥ng tin";
    try {
      return new Date(dateString).toLocaleDateString("vi-VN");
    } catch (error) {
      return "Ng√†y kh√¥ng h·ª£p l·ªá";
    }
  };

  const formatDateTime = (dateTimeString) => {
    if (!dateTimeString) return "Ch∆∞a c√≥ th√¥ng tin";
    try {
      return new Date(dateTimeString).toLocaleString("vi-VN");
    } catch (error) {
      return "Th·ªùi gian kh√¥ng h·ª£p l·ªá";
    }
  };

  const viewRecordDetail = (record) => {
    setSelectedRecord(record);
    setModalVisible(true);
  };

  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case "completed":
        return "green";
      case "in progress":
        return "blue";
      case "pending":
        return "orange";
      case "cancelled":
        return "red";
      default:
        return "default";
    }
  };

  const getStatusText = (status) => {
    switch (status?.toLowerCase()) {
      case "completed":
        return "Ho√†n th√†nh";
      case "in progress":
        return "ƒêang th·ª±c hi·ªán";
      case "pending":
        return "Ch·ªù th·ª±c hi·ªán";
      case "cancelled":
        return "ƒê√£ h·ªßy";
      default:
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
  };

  const clinicalColumns = [
    {
      title: "Ng√†y kh√°m",
      dataIndex: "examinationDate",
      key: "examinationDate",
      render: (date) => formatDate(date),
      sorter: (a, b) =>
        new Date(a.examinationDate) - new Date(b.examinationDate),
    },
    {
      title: "Ch·∫©n ƒëo√°n",
      dataIndex: "diagnosis",
      key: "diagnosis",
      render: (diagnosis) => diagnosis || "Ch∆∞a c√≥",
    },
    {
      title: "B√°c sƒ©",
      dataIndex: "doctorName",
      key: "doctorName",
      render: (name) => name || "Ch∆∞a ph√¢n c√¥ng",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "isCompleted",
      key: "isCompleted",
      render: (completed) => (
        <Tag color={completed ? "green" : "orange"}>
          {completed ? "Ho√†n th√†nh" : "ƒêang x·ª≠ l√Ω"}
        </Tag>
      ),
    },
    {
      title: "Thao t√°c",
      key: "actions",
      render: (_, record) => (
        <Space>
          <Button
            type="primary"
            size="small"
            icon={<EyeOutlined />}
            onClick={() => viewRecordDetail(record)}
          >
            Xem chi ti·∫øt
          </Button>
        </Space>
      ),
    },
  ];

  const treatmentColumns = [
    {
      title: "Giai ƒëo·∫°n",
      dataIndex: "phaseName",
      key: "phaseName",
      render: (name) => name || "Giai ƒëo·∫°n ƒëi·ªÅu tr·ªã",
    },
    {
      title: "Ng√†y b·∫Øt ƒë·∫ßu",
      dataIndex: "startDate",
      key: "startDate",
      render: (date) => formatDate(date),
    },
    {
      title: "Ng√†y k·∫øt th√∫c",
      dataIndex: "endDate",
      key: "endDate",
      render: (date) => formatDate(date) || "Ch∆∞a k·∫øt th√∫c",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      render: (status) => (
        <Tag color={getStatusColor(status)}>{getStatusText(status)}</Tag>
      ),
    },
    {
      title: "Ghi ch√∫",
      dataIndex: "notes",
      key: "notes",
      render: (notes) => notes || "Kh√¥ng c√≥ ghi ch√∫",
    },
  ];

  if (loading) {
    return (
      <div className="patient-page-loading">
        <Spin size="large" />
        <Text>ƒêang t·∫£i h·ªì s∆° y t·∫ø...</Text>
      </div>
    );
  }

  if (error) {
    return (
      <div className="patient-page-error">
        <Alert
          message="L·ªói t·∫£i d·ªØ li·ªáu"
          description={error}
          type="error"
          showIcon
          action={
            <Button size="small" danger onClick={loadMedicalRecords}>
              Th·ª≠ l·∫°i
            </Button>
          }
        />
      </div>
    );
  }

  return (
    <div className="patient-medical-records">
      {/* Header */}
      <div className="page-header">
        <Row justify="space-between" align="middle">
          <Col>
            <Title level={2}>H·ªì s∆° y t·∫ø</Title>
            <Text type="secondary">Xem v√† qu·∫£n l√Ω h·ªì s∆° y t·∫ø c·ªßa b·∫°n</Text>
          </Col>
          <Col>
            <Button
              icon={<ReloadOutlined />}
              onClick={refreshData}
              loading={refreshing}
            >
              L√†m m·ªõi
            </Button>
          </Col>
        </Row>
      </div>

      {/* Statistics */}
      <Row gutter={[24, 24]} className="mt-24">
        <Col xs={24} md={6}>
          <Card>
            <Statistic
              title="T·ªïng k·∫øt qu·∫£ kh√°m"
              value={clinicalResults.length}
              prefix={<FileTextOutlined />}
            />
          </Card>
        </Col>
        <Col xs={24} md={6}>
          <Card>
            <Statistic
              title="K·∫øt qu·∫£ ho√†n th√†nh"
              value={clinicalResults.filter((r) => r.isCompleted).length}
              prefix={<CheckCircleOutlined />}
              valueStyle={{ color: "#52c41a" }}
            />
          </Card>
        </Col>
        <Col xs={24} md={6}>
          <Card>
            <Statistic
              title="Giai ƒëo·∫°n ƒëi·ªÅu tr·ªã"
              value={treatmentHistory.length}
              prefix={<MedicineBoxOutlined />}
              valueStyle={{ color: "#1890ff" }}
            />
          </Card>
        </Col>
        <Col xs={24} md={6}>
          <Card>
            <Statistic
              title="Giai ƒëo·∫°n ho√†n th√†nh"
              value={
                treatmentHistory.filter((t) => t.status === "Completed").length
              }
              prefix={<HeartOutlined />}
              valueStyle={{ color: "#ff4d4f" }}
            />
          </Card>
        </Col>
      </Row>

      {/* Main Content */}
      <Row gutter={[24, 24]} className="mt-24">
        <Col span={24}>
          <Card className="records-card">
            <Tabs defaultActiveKey="clinical">
              <TabPane
                tab={
                  <span>
                    <FileTextOutlined />
                    K·∫øt qu·∫£ kh√°m l√¢m s√†ng
                    <Badge
                      count={clinicalResults.length}
                      style={{ marginLeft: 8 }}
                    />
                  </span>
                }
                key="clinical"
              >
                {clinicalResults.length > 0 ? (
                  <Table
                    columns={clinicalColumns}
                    dataSource={clinicalResults}
                    rowKey="resultId"
                    pagination={{
                      pageSize: 10,
                      showSizeChanger: true,
                      showQuickJumper: true,
                      showTotal: (total, range) =>
                        `${range[0]}-${range[1]} c·ªßa ${total} k·∫øt qu·∫£`,
                    }}
                  />
                ) : (
                  <Empty
                    description="Ch∆∞a c√≥ k·∫øt qu·∫£ kh√°m l√¢m s√†ng"
                    image={Empty.PRESENTED_IMAGE_SIMPLE}
                  />
                )}
              </TabPane>

              <TabPane
                tab={
                  <span>
                    <MedicineBoxOutlined />
                    L·ªãch s·ª≠ ƒëi·ªÅu tr·ªã
                    <Badge
                      count={treatmentHistory.length}
                      style={{ marginLeft: 8 }}
                    />
                  </span>
                }
                key="treatment"
              >
                {treatmentHistory.length > 0 ? (
                  <Table
                    columns={treatmentColumns}
                    dataSource={treatmentHistory}
                    rowKey={(record, index) => index}
                    pagination={{
                      pageSize: 10,
                      showSizeChanger: true,
                      showQuickJumper: true,
                      showTotal: (total, range) =>
                        `${range[0]}-${range[1]} c·ªßa ${total} giai ƒëo·∫°n`,
                    }}
                  />
                ) : (
                  <Empty
                    description="Ch∆∞a c√≥ l·ªãch s·ª≠ ƒëi·ªÅu tr·ªã"
                    image={Empty.PRESENTED_IMAGE_SIMPLE}
                  />
                )}
              </TabPane>

              <TabPane
                tab={
                  <span>
                    <HistoryOutlined />
                    T·ªïng quan
                  </span>
                }
                key="overview"
              >
                <Row gutter={[24, 24]}>
                  <Col xs={24} lg={12}>
                    <Card title="K·∫øt qu·∫£ kh√°m g·∫ßn ƒë√¢y" size="small">
                      {clinicalResults.length > 0 ? (
                        <List
                          dataSource={clinicalResults.slice(0, 5)}
                          renderItem={(result) => (
                            <List.Item>
                              <List.Item.Meta
                                avatar={<Avatar icon={<FileTextOutlined />} />}
                                title={
                                  <Space>
                                    <Text strong>
                                      {formatDate(result.examinationDate)}
                                    </Text>
                                    <Tag
                                      color={
                                        result.isCompleted ? "green" : "orange"
                                      }
                                    >
                                      {result.isCompleted
                                        ? "Ho√†n th√†nh"
                                        : "ƒêang x·ª≠ l√Ω"}
                                    </Tag>
                                  </Space>
                                }
                                description={
                                  <div>
                                    <Text>
                                      Ch·∫©n ƒëo√°n: {result.diagnosis || "Ch∆∞a c√≥"}
                                    </Text>
                                    <br />
                                    <Text type="secondary">
                                      B√°c sƒ©:{" "}
                                      {result.doctorName || "Ch∆∞a ph√¢n c√¥ng"}
                                    </Text>
                                  </div>
                                }
                              />
                            </List.Item>
                          )}
                        />
                      ) : (
                        <Empty
                          description="Ch∆∞a c√≥ k·∫øt qu·∫£ kh√°m"
                          image={Empty.PRESENTED_IMAGE_SIMPLE}
                        />
                      )}
                    </Card>
                  </Col>

                  <Col xs={24} lg={12}>
                    <Card title="Giai ƒëo·∫°n ƒëi·ªÅu tr·ªã g·∫ßn ƒë√¢y" size="small">
                      {treatmentHistory.length > 0 ? (
                        <Timeline>
                          {treatmentHistory
                            .slice(0, 5)
                            .map((treatment, index) => (
                              <Timeline.Item
                                key={index}
                                color={getStatusColor(treatment.status)}
                              >
                                <div>
                                  <Text strong>
                                    {treatment.phaseName ||
                                      "Giai ƒëo·∫°n ƒëi·ªÅu tr·ªã"}
                                  </Text>
                                  <br />
                                  <Text type="secondary">
                                    {formatDate(treatment.startDate)} -{" "}
                                    {formatDate(treatment.endDate) ||
                                      "ƒêang th·ª±c hi·ªán"}
                                  </Text>
                                  <br />
                                  <Tag color={getStatusColor(treatment.status)}>
                                    {getStatusText(treatment.status)}
                                  </Tag>
                                </div>
                              </Timeline.Item>
                            ))}
                        </Timeline>
                      ) : (
                        <Empty
                          description="Ch∆∞a c√≥ giai ƒëo·∫°n ƒëi·ªÅu tr·ªã"
                          image={Empty.PRESENTED_IMAGE_SIMPLE}
                        />
                      )}
                    </Card>
                  </Col>
                </Row>
              </TabPane>
            </Tabs>
          </Card>
        </Col>
      </Row>

      {/* Detail Modal */}
      <Modal
        title="Chi ti·∫øt k·∫øt qu·∫£ kh√°m"
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setModalVisible(false)}>
            ƒê√≥ng
          </Button>,
        ]}
        width={800}
      >
        {selectedRecord && (
          <Descriptions column={2} bordered>
            <Descriptions.Item label="Ng√†y kh√°m" span={2}>
              {formatDateTime(selectedRecord.examinationDate)}
            </Descriptions.Item>
            <Descriptions.Item label="B√°c sƒ© kh√°m">
              {selectedRecord.doctorName || "Ch∆∞a ph√¢n c√¥ng"}
            </Descriptions.Item>
            <Descriptions.Item label="Tr·∫°ng th√°i">
              <Tag color={selectedRecord.isCompleted ? "green" : "orange"}>
                {selectedRecord.isCompleted ? "Ho√†n th√†nh" : "ƒêang x·ª≠ l√Ω"}
              </Tag>
            </Descriptions.Item>
            <Descriptions.Item label="Ch·∫©n ƒëo√°n" span={2}>
              {selectedRecord.diagnosis || "Ch∆∞a c√≥"}
            </Descriptions.Item>
            <Descriptions.Item label="Tri·ªáu ch·ª©ng" span={2}>
              {selectedRecord.symptoms || "Ch∆∞a c√≥"}
            </Descriptions.Item>
            <Descriptions.Item label="Khuy·∫øn ngh·ªã" span={2}>
              {selectedRecord.recommendations || "Ch∆∞a c√≥"}
            </Descriptions.Item>
            {selectedRecord.notes && (
              <Descriptions.Item label="Ghi ch√∫" span={2}>
                {selectedRecord.notes}
              </Descriptions.Item>
            )}
            {selectedRecord.attachedFileUrl && (
              <Descriptions.Item label="File ƒë√≠nh k√®m" span={2}>
                <Button
                  type="link"
                  icon={<DownloadOutlined />}
                  href={selectedRecord.attachedFileUrl}
                  target="_blank"
                >
                  T·∫£i xu·ªëng
                </Button>
              </Descriptions.Item>
            )}
          </Descriptions>
        )}
      </Modal>
    </div>
  );
};

export default MedicalRecords;
