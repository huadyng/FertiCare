import React, { useEffect, useState } from "react";
import {
  Form,
  Input,
  DatePicker,
  TimePicker,
  Select,
  Button,
  message,
  Spin,
} from "antd";
import { getDoctors } from "../../../api/apiManager";
import dayjs from "dayjs";

const { Option } = Select;

const ShiftForm = ({ mode, initialValues, onSubmit, onCancel }) => {
  const [form] = Form.useForm();
  const [doctors, setDoctors] = useState([]);
  const [loadingDoctors, setLoadingDoctors] = useState(false);

  const isReadOnly = mode === "detail";

  // ‚úÖ Convert safely string -> dayjs or return null
  const safeDayjs = (value, format) => {
    if (!value) return null;
    const parsed = format ? dayjs(value, format) : dayjs(value);
    return parsed.isValid() ? parsed : null;
  };

  // üì• Fetch doctors list
  const fetchDoctors = async () => {
    setLoadingDoctors(true);
    try {
      const res = await getDoctors();
      const doctorData = Array.isArray(res.data) ? res.data : [];
      setDoctors(doctorData);
    } catch (err) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch b√°c sƒ©:", err);
      message.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√°c sƒ©");
    } finally {
      setLoadingDoctors(false);
    }
  };

  // ‚è≥ Preload form data
  useEffect(() => {
    if (mode === "assign") fetchDoctors();

    if (initialValues) {
      form.setFieldsValue({
        ...initialValues,
        date: safeDayjs(initialValues.date, "YYYY-MM-DD"),
        startTime: safeDayjs(initialValues.startTime, "HH:mm"),
        endTime: safeDayjs(initialValues.endTime, "HH:mm"),
        staffIds: initialValues.assignedStaff?.map((s) => s.staffId) || [],
        status: initialValues.status || "active",
      });
    } else {
      form.resetFields();
    }
  }, [initialValues, mode]);

  // üìù Submit
  const handleFinish = (values) => {
    let payload = {};
    if (mode === "assign") {
      payload = {
        shiftId: initialValues?.id,
        staffIds: values.staffIds,
        note: values.note || "",
        status: values.status,
      };
    } else {
      payload = {
        name: values.name,
        department: values.department,
        date: values.date?.format("YYYY-MM-DD"),
        startTime: values.startTime?.format("HH:mm"),
        endTime: values.endTime?.format("HH:mm"),
        priority: values.priority,
        note: values.note,
        requiredDoctors: values.requiredDoctors,
        requiredNurses: 0, // M·∫∑c ƒë·ªãnh
        requiredTechnicians: 0, // M·∫∑c ƒë·ªãnh
      };
    }
    onSubmit(payload);
  };

  return (
    <Spin spinning={loadingDoctors && mode === "assign"}>
      <Form form={form} layout="vertical" onFinish={handleFinish}>
        {/* üü¢ Form T·∫°o/S·ª≠a ca */}
        {mode !== "assign" && (
          <>
            <Form.Item
              label="T√™n ca"
              name="name"
              rules={[{ required: true, message: "Nh·∫≠p t√™n ca" }]}
            >
              <Input disabled={isReadOnly} />
            </Form.Item>

            <Form.Item
              label="Ph√≤ng ban"
              name="department"
              rules={[{ required: true, message: "Nh·∫≠p ph√≤ng ban" }]}
            >
              <Input disabled={isReadOnly} />
            </Form.Item>

            <Form.Item
              label="Ng√†y"
              name="date"
              rules={[{ required: true, message: "Ch·ªçn ng√†y" }]}
            >
              <DatePicker
                disabled={isReadOnly}
                style={{ width: "100%" }}
                format="YYYY-MM-DD"
              />
            </Form.Item>

            <Form.Item label="Th·ªùi gian" style={{ marginBottom: 0 }}>
              <Form.Item
                name="startTime"
                rules={[{ required: true, message: "Ch·ªçn gi·ªù b·∫Øt ƒë·∫ßu" }]}
                style={{ display: "inline-block", width: "48%" }}
              >
                <TimePicker
                  disabled={isReadOnly}
                  style={{ width: "100%" }}
                  format="HH:mm"
                />
              </Form.Item>
              <span
                style={{
                  display: "inline-block",
                  width: "4%",
                  textAlign: "center",
                }}
              >
                -
              </span>
              <Form.Item
                name="endTime"
                rules={[{ required: true, message: "Ch·ªçn gi·ªù k·∫øt th√∫c" }]}
                style={{ display: "inline-block", width: "48%" }}
              >
                <TimePicker
                  disabled={isReadOnly}
                  style={{ width: "100%" }}
                  format="HH:mm"
                />
              </Form.Item>
            </Form.Item>

            <Form.Item
              label="∆Øu ti√™n"
              name="priority"
              rules={[{ required: true, message: "Ch·ªçn m·ª©c ∆∞u ti√™n" }]}
            >
              <Select disabled={isReadOnly}>
                <Option value="high">Cao</Option>
                <Option value="medium">Trung b√¨nh</Option>
                <Option value="low">Th·∫•p</Option>
              </Select>
            </Form.Item>

            <Form.Item
              label="S·ªë b√°c sƒ© c·∫ßn"
              name="requiredDoctors"
              rules={[{ required: true, message: "Nh·∫≠p s·ªë b√°c sƒ© c·∫ßn" }]}
            >
              <Input type="number" disabled={isReadOnly} />
            </Form.Item>

            <Form.Item label="Ghi ch√∫" name="note">
              <Input.TextArea rows={3} disabled={isReadOnly} />
            </Form.Item>
          </>
        )}

        {/* üü° Form Ph√¢n ca */}
        {mode === "assign" && (
          <>
            <Form.Item
              label="Ch·ªçn b√°c sƒ©"
              name="staffIds"
              rules={[{ required: true, message: "Ch·ªçn √≠t nh·∫•t 1 b√°c sƒ©" }]}
            >
              <Select
                mode="multiple"
                placeholder="Ch·ªçn b√°c sƒ©"
                optionFilterProp="children"
              >
                {doctors.map((doc) => (
                  <Option key={doc.id} value={doc.id}>
                    {doc.fullName}
                  </Option>
                ))}
              </Select>
            </Form.Item>

            <Form.Item
              label="Tr·∫°ng th√°i"
              name="status"
              rules={[{ required: true, message: "Ch·ªçn tr·∫°ng th√°i" }]}
            >
              <Select placeholder="Ch·ªçn tr·∫°ng th√°i">
                <Option value="active">Ho·∫°t ƒë·ªông</Option>
                <Option value="pending">Ch·ªù</Option>
              </Select>
            </Form.Item>

            <Form.Item label="Ghi ch√∫" name="note">
              <Input.TextArea rows={3} />
            </Form.Item>
          </>
        )}

        {/* üü£ Action buttons */}
        {!isReadOnly && (
          <Form.Item>
            <Button type="primary" htmlType="submit" style={{ marginRight: 8 }}>
              {mode === "assign"
                ? "üë• X√°c nh·∫≠n ph√¢n ca"
                : mode === "edit"
                ? "üíæ L∆∞u"
                : "‚ûï T·∫°o"}
            </Button>
            <Button onClick={onCancel}>H·ªßy</Button>
          </Form.Item>
        )}
      </Form>
    </Spin>
  );
};

export default ShiftForm;
